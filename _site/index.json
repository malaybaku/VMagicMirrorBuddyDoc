{
  "api/VMagicMirror.Buddy.AppLanguage.html": {
    "href": "api/VMagicMirror.Buddy.AppLanguage.html",
    "title": "Enum AppLanguage | VMagicMirror Buddy",
    "summary": "Enum AppLanguage Namespace VMagicMirror.Buddy VMagicMirrorの表示に使用している言語です。 public enum AppLanguage Fields Unknown = 0 日本語、英語のいずれでもない言語 Japanese = 1 日本語 English = 2 英語 Remarks VMagicMirrorのローカライズシステムの実装都合により、日本語・英語以外の言語は Unknown として扱われます。 多言語に詳細に対応できるサブキャラを作る場合、 IProperty を通じて言語選択UIを提供することも検討してください。"
  },
  "api/VMagicMirror.Buddy.AudioStartedInfo.html": {
    "href": "api/VMagicMirror.Buddy.AudioStartedInfo.html",
    "title": "Struct AudioStartedInfo | VMagicMirror Buddy",
    "summary": "Struct AudioStartedInfo Namespace VMagicMirror.Buddy AudioStarted イベントに付随する情報です。 public readonly struct AudioStartedInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors AudioStartedInfo(string, float) 開始したオーディオのキー情報と再生時間を指定してインスタンスを初期化します。 このコンストラクタはアプリケーションが内部的に使用します。スクリプトから直接使用することは推奨していません。 public AudioStartedInfo(string key, float length) Parameters key string length float Properties Key Play(string, float, float, string)で指定した key の値を取得します。 public string Key { get; } Property Value string Length 音声の再生時間を秒単位で取得します。 public float Length { get; } Property Value float Remarks この値は Play(string, float, float, string) で指定した pitch を考慮しない値です。"
  },
  "api/VMagicMirror.Buddy.AudioStoppedInfo.html": {
    "href": "api/VMagicMirror.Buddy.AudioStoppedInfo.html",
    "title": "Struct AudioStoppedInfo | VMagicMirror Buddy",
    "summary": "Struct AudioStoppedInfo Namespace VMagicMirror.Buddy AudioStopped イベントに付随する情報です。 public readonly struct AudioStoppedInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors AudioStoppedInfo(string, AudioStoppedReason) 停止したオーディオのキー情報と、停止した理由を指定してインスタンスを初期化します。 このコンストラクタはアプリケーションが内部的に使用します。スクリプトから直接使用することは推奨していません。 public AudioStoppedInfo(string key, AudioStoppedReason reason) Parameters key string reason AudioStoppedReason Properties Key Play(string, float, float, string)で指定した key の値を取得します。 public string Key { get; } Property Value string Reason 音声が停止した理由を取得します。 public AudioStoppedReason Reason { get; } Property Value AudioStoppedReason"
  },
  "api/VMagicMirror.Buddy.AudioStoppedReason.html": {
    "href": "api/VMagicMirror.Buddy.AudioStoppedReason.html",
    "title": "Enum AudioStoppedReason | VMagicMirror Buddy",
    "summary": "Enum AudioStoppedReason Namespace VMagicMirror.Buddy Play(string, float, float, string) で再生した音声が停止した理由を表す値です。 public enum AudioStoppedReason Fields Unknown = 0 不明な理由 Completed = 1 音声の終端まで再生を完了した Stopped = 2 Stop(string) によって再生を停止した Interrupted = 3 他の音源の再生によって、再生が中断された"
  },
  "api/VMagicMirror.Buddy.BlendShapePresetNames.html": {
    "href": "api/VMagicMirror.Buddy.BlendShapePresetNames.html",
    "title": "Class BlendShapePresetNames | VMagicMirror Buddy",
    "summary": "Class BlendShapePresetNames Namespace VMagicMirror.Buddy IAvatarFacialなどで適用されることのあるブレンドシェイプ名のうち、 VRM1.0 の標準として定義されるブレンドシェイプの名称を定義したクラスです。 public static class BlendShapePresetNames Inheritance object BlendShapePresetNames Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks VRM1.0 の標準以外のブレンドシェイプとしては、パーフェクトシンクに関するブレンドシェイプ名が PerfectSyncBlendShapeNames で定義されています。 Properties Aa public static string Aa { get; } Property Value string Angry public static string Angry { get; } Property Value string Blink public static string Blink { get; } Property Value string BlinkLeft public static string BlinkLeft { get; } Property Value string BlinkRight public static string BlinkRight { get; } Property Value string Ee public static string Ee { get; } Property Value string Happy public static string Happy { get; } Property Value string Ih public static string Ih { get; } Property Value string LookDown public static string LookDown { get; } Property Value string LookLeft public static string LookLeft { get; } Property Value string LookRight public static string LookRight { get; } Property Value string LookUp public static string LookUp { get; } Property Value string Neutral public static string Neutral { get; } Property Value string Oh public static string Oh { get; } Property Value string Ou public static string Ou { get; } Property Value string Relaxed public static string Relaxed { get; } Property Value string Sad public static string Sad { get; } Property Value string Surprised public static string Surprised { get; } Property Value string"
  },
  "api/VMagicMirror.Buddy.FaceSwitchState.html": {
    "href": "api/VMagicMirror.Buddy.FaceSwitchState.html",
    "title": "Enum FaceSwitchState | VMagicMirror Buddy",
    "summary": "Enum FaceSwitchState Namespace VMagicMirror.Buddy GetActiveFaceSwitch() の結果として取得できるような、 Face Switch機能で検出したユーザーの表情です。 public enum FaceSwitchState Fields None = 0 表情を特に検出していない MouthSmile = 1 口元を笑顔にした EyeSquint = 2 目を細めた EyeWide = 3 目を大きく見開いた BrowUp = 4 眉毛を大きく上げた BrowDown = 5 眉毛を大きく下げた CheekPuff = 6 頬をふくらませた TongueOut = 7 舌を出した"
  },
  "api/VMagicMirror.Buddy.GamepadButton.html": {
    "href": "api/VMagicMirror.Buddy.GamepadButton.html",
    "title": "Enum GamepadButton | VMagicMirror Buddy",
    "summary": "Enum GamepadButton Namespace VMagicMirror.Buddy ゲームパッドのボタンです。 public enum GamepadButton Fields Left = 0 矢印キーの左 Right = 1 矢印キーの右 Up = 2 矢印キーの上 Down = 3 矢印キーの下 A = 4 Aボタン B = 5 Bボタン X = 6 Xボタン Y = 7 Yボタン RButton = 8 右人差し指で押せるRBボタン LButton = 9 左人差し指で押せるLBボタン RTrigger = 10 右中指で押せるRTボタン トリガーについては、一定以上握り込むことでボタンを押したものとして扱います。 LTrigger = 11 左中指で押せるRTボタン トリガーについては、一定以上握り込むことでボタンを押したものとして扱います。 View = 12 ゲームパッド中央付近で、右側にあるViewボタン Select = 13 ゲームパッド中央付近の左側にあるMenuボタン Unknown = 14 ボタンが不明な場合に使用されますが、通常は使用されない値です。"
  },
  "api/VMagicMirror.Buddy.HumanBodyBones.html": {
    "href": "api/VMagicMirror.Buddy.HumanBodyBones.html",
    "title": "Enum HumanBodyBones | VMagicMirror Buddy",
    "summary": "Enum HumanBodyBones Namespace VMagicMirror.Buddy UnityEngineのHumanBodyBonesと同じ順序で定義された人型ボーン情報の一覧です。 ただし、UnityEngineの値とは異なり、無効なボーンを表す None が追加で定義されています。 public enum HumanBodyBones Fields None = -1 Hips = 0 LeftUpperLeg = 1 RightUpperLeg = 2 LeftLowerLeg = 3 RightLowerLeg = 4 LeftFoot = 5 RightFoot = 6 Spine = 7 Chest = 8 Neck = 9 Head = 10 LeftShoulder = 11 RightShoulder = 12 LeftUpperArm = 13 RightUpperArm = 14 LeftLowerArm = 15 RightLowerArm = 16 LeftHand = 17 RightHand = 18 LeftToes = 19 RightToes = 20 LeftEye = 21 RightEye = 22 Jaw = 23 LeftThumbProximal = 24 LeftThumbIntermediate = 25 LeftThumbDistal = 26 LeftIndexProximal = 27 LeftIndexIntermediate = 28 LeftIndexDistal = 29 LeftMiddleProximal = 30 LeftMiddleIntermediate = 31 LeftMiddleDistal = 32 LeftRingProximal = 33 LeftRingIntermediate = 34 LeftRingDistal = 35 LeftLittleProximal = 36 LeftLittleIntermediate = 37 LeftLittleDistal = 38 RightThumbProximal = 39 RightThumbIntermediate = 40 RightThumbDistal = 41 RightIndexProximal = 42 RightIndexIntermediate = 43 RightIndexDistal = 44 RightMiddleProximal = 45 RightMiddleIntermediate = 46 RightMiddleDistal = 47 RightRingProximal = 48 RightRingIntermediate = 49 RightRingDistal = 50 RightLittleProximal = 51 RightLittleIntermediate = 52 RightLittleDistal = 53 UpperChest = 54 LastBone = 55"
  },
  "api/VMagicMirror.Buddy.IAudio.html": {
    "href": "api/VMagicMirror.Buddy.IAudio.html",
    "title": "Interface IAudio | VMagicMirror Buddy",
    "summary": "Interface IAudio Namespace VMagicMirror.Buddy 音声の再生に関連するAPIです。 public interface IAudio Methods Play(string, float, float, string) ファイルパスを指定して音声を再生します。 void Play(string path, float volume = 1, float pitch = 1, string key = \"\") Parameters path string 音声データのファイルパス volume float 音声のボリュームを 0 以上、1 以下の値で指定します。指定しない場合は 1.0f であるものとして扱われます。 pitch float 音声のピッチを、1を基準として指定します。指定しない場合は 1.0f になります。 key string AudioStarted で実際に音声再生が開始したことを検出するときの一意識別子が必要な場合、その文字列を指定します。指定しない場合は空文字列になります。 Remarks この関数を呼び出してから音声再生が開始するまでにはディレイが発生する場合があります。 実際に音声の再生が開始したことは AudioStarted イベントで確認できます。 Stop(string) 音声の再生を停止します。 void Stop(string key = \"\") Parameters key string 特定の音声の再生を停止する場合、Play(string, float, float, string)で指定したのと同じ値を指定します。 このサブキャラが再生している全ての音声を停止する場合、空文字列を指定します。 デフォルトでは空文字列が指定されたものとして扱われます。 Remarks この関数は Play(string, float, float, string) を呼び出していない場合やすでに音声が再生終了している場合にも実行できますが、その場合は何も起こりません。 Events AudioStarted Play(string, float, float, string) で指定して音声の再生を開始するときに発火します。 event Action<AudioStartedInfo> AudioStarted Event Type Action<AudioStartedInfo> AudioStopped Play(string, float, float, string) で指定した音声の再生が停止するときに発火します。 event Action<AudioStoppedInfo> AudioStopped Event Type Action<AudioStoppedInfo>"
  },
  "api/VMagicMirror.Buddy.IAvatarBodyParameter.html": {
    "href": "api/VMagicMirror.Buddy.IAvatarBodyParameter.html",
    "title": "Interface IAvatarBodyParameter | VMagicMirror Buddy",
    "summary": "Interface IAvatarBodyParameter Namespace VMagicMirror.Buddy public interface IAvatarBodyParameter"
  },
  "api/VMagicMirror.Buddy.IAvatarFacial.html": {
    "href": "api/VMagicMirror.Buddy.IAvatarFacial.html",
    "title": "Interface IAvatarFacial | VMagicMirror Buddy",
    "summary": "Interface IAvatarFacial Namespace VMagicMirror.Buddy アバターの表情の状態に関するAPIです。 public interface IAvatarFacial Properties CurrentFacial 現在アバターに適用されている表情のうち、表情トラッキング以外の方法で明示的に適用された表情のBlendShapeClipの名称を取得します。 string CurrentFacial { get; } Property Value string Remarks このプロパティでは、Word to Motion機能によって表情を切り替えたり、外部トラッキングによるFace Switch機能で表情を切り替えた場合の表情を取得できます。 HappyやSurprisedなど表情はこの方法で取得できます。 リップシンクやまばたきのブレンドシェイプはこのプロパティでは取得できません。 IsTalking マイク入力で発声を検知し、アバターにリップシンクが適用されている場合はtrue、それ以外の場合はfalseを取得します。 bool IsTalking { get; } Property Value bool Remarks 外部トラッキングによって口の開閉をトラッキングしている場合であっても、マイク入力が検知できなければfalseを返します。 UsePerfectSync 外部トラッキング機能を使用し、かつパーフェクトシンクが有効な場合にtrue、それ以外の場合はfalseを取得します。 bool UsePerfectSync { get; } Property Value bool Methods GetActiveFaceSwitch() ユーザーが外部トラッキング機能に基づくFace Switch機能を使っている場合に、Face Switch機能で検出した表情の名称を取得します。 FaceSwitchState GetActiveFaceSwitch() Returns FaceSwitchState GetCurrentValue(string, bool) 指定したブレンドシェイプの現在の値を取得します。 float GetCurrentValue(string name, bool customKey) Parameters name string ブレンドシェイプ名 customKey bool カスタムブレンドシェイプの値を取得する場合はtrue、そうでなければfalseを指定します。 Returns float ブレンドシェイプの値。0以上、1以下の値を返します。 Remarks アバターがロードされていない場合や、指定したブレンドシェイプがアバターに定義されていない場合は、この関数は0を返します。 HasClip(string) 現在ロードしているアバターに指定した名称のカスタムブレンドシェイプが定義されているかどうかを取得します。 bool HasClip(string name) Parameters name string ブレンドシェイプ名 Returns bool Remarks アバターがロードされていない場合、この関数はfalseを返します。 Events OnBlinked アバターがまばたき動作を行うと発火します。 event Action OnBlinked Event Type Action Remarks このイベントは自動まばたきを適用している場合の自動でのまばたき、外部トラッキングによる目のトラッキングによる瞬きに対して発火します。 外部トラッキングを使用していて目をゆっくり開閉した場合や、短時間で連続でまばたきを行った場合には発火しない場合があります。 ウインクに対してもこのイベントは発火しません。"
  },
  "api/VMagicMirror.Buddy.IAvatarLoadEvent.html": {
    "href": "api/VMagicMirror.Buddy.IAvatarLoadEvent.html",
    "title": "Interface IAvatarLoadEvent | VMagicMirror Buddy",
    "summary": "Interface IAvatarLoadEvent Namespace VMagicMirror.Buddy アバターのロード状態に関するAPIです。 public interface IAvatarLoadEvent Properties IsLoaded アバターがロード済みであれば true、そうでなければ false を取得します。 bool IsLoaded { get; } Property Value bool Events Loaded アバターのロードが完了すると発火します。 event Action Loaded Event Type Action Remarks サブキャラが起動した時点ですでにアバターがロード済みだった場合、 このイベントは Start よりも後、 かつ Update より前に一度発火します。 Unloaded アバターがアンロードされる時に発火します。 event Action Unloaded Event Type Action"
  },
  "api/VMagicMirror.Buddy.IAvatarMotionEvent.html": {
    "href": "api/VMagicMirror.Buddy.IAvatarMotionEvent.html",
    "title": "Interface IAvatarMotionEvent | VMagicMirror Buddy",
    "summary": "Interface IAvatarMotionEvent Namespace VMagicMirror.Buddy アバターの動作をイベントとして検出できるAPIです。 public interface IAvatarMotionEvent Events OnArcadeStickButtonDown アバターがアーケードスティックを操作するモーションを行う状態であり、かつゲームパッドのボタンが押し下げられると発火します。 event Action<GamepadButton> OnArcadeStickButtonDown Event Type Action<GamepadButton> OnGamepadButtonDown アバターがゲームパッドを操作するモーションを行う状態であり、かつゲームパッドのボタンが押し下げられると発火します。 event Action<GamepadButton> OnGamepadButtonDown Event Type Action<GamepadButton> OnKeyboardKeyDown アバターがキーボードを打鍵するモーションを行う状態になっており、実際に打鍵モーションを開始した場合に発火します。 event Action<string> OnKeyboardKeyDown Event Type Action<string> Remarks キー名はENTERキーの打鍵時に \"Enter\" を引数とします。 それ以外のキーについては、打鍵時してもキー名は特定できず、空文字列が引数となります。 ユーザーが打鍵をランダム表示するオプションを有効にしている場合、常に空文字列が引数になります。 OnPenTabletMouseButtonDown アバターがペンタブレットを操作するモーションを行う状態であり、かつペンタブレットのクリック動作を開始したときに発火します。 event Action OnPenTabletMouseButtonDown Event Type Action Remarks このイベントではマウスのどのボタンに対してイベントが発火したかは公開されません。 OnTouchPadMouseButtonDown アバターがタッチパッド (マウスパッド) を操作するモーションを行う状態であり、かつマウスのクリック動作を開始したときに発火します。 event Action OnTouchPadMouseButtonDown Event Type Action Remarks このイベントではマウスのどのボタンに対してイベントが発火したかは公開されません。"
  },
  "api/VMagicMirror.Buddy.IAvatarPose.html": {
    "href": "api/VMagicMirror.Buddy.IAvatarPose.html",
    "title": "Interface IAvatarPose | VMagicMirror Buddy",
    "summary": "Interface IAvatarPose Namespace VMagicMirror.Buddy アバターの姿勢情報に関するAPIです。 public interface IAvatarPose Methods GetBoneGlobalPosition(HumanBodyBones, bool) 指定したボーンの位置をワールド座標で取得します。 Vector3 GetBoneGlobalPosition(HumanBodyBones bone, bool useParentBone = true) Parameters bone HumanBodyBones ボーン useParentBone bool true を指定した場合、bone で指定したボーンが存在しないと親ボーンの値を代わりに返します。 Returns Vector3 ボーンの位置 Remarks アバターがロードされていない場合、この関数は zero を返します。 また、任意ボーンがアバターに存在せず、かつ useParentBone が false だった場合にも、この関数は zero を返します。 useParentBone が true の場合、任意ボーンがなければ有効な親ボーンまで遡ってボーン姿勢を返します。 例えば、親指ボーンがないアバターに対して LeftThumbProximal を指定してこの関数を呼び出した場合、 左手首ボーンつまり LeftHand のボーン位置を返します。 GetBoneGlobalRotation(HumanBodyBones, bool) 指定したボーンの回転をワールド座標で取得します。 Quaternion GetBoneGlobalRotation(HumanBodyBones bone, bool useParentBone = true) Parameters bone HumanBodyBones ボーン useParentBone bool true を指定した場合、bone で指定したボーンが存在しないと親ボーンの値を代わりに返します。 Returns Quaternion ボーンの回転 Remarks アバターがロードされていない場合、この関数は identity を返します。 また、任意ボーンがアバターに存在せず、かつ useParentBone が false だった場合にも、この関数は identity を返します。 useParentBone が true の場合、任意ボーンがなければ有効な親ボーンまで遡ってボーン姿勢を返します。 例えば、親指ボーンがないアバターに対して LeftThumbProximal を指定してこの関数を呼び出した場合、 左手首ボーンつまり LeftHand のボーン回転を返します。 GetBoneLocalPosition(HumanBodyBones, bool) 指定したボーンの位置をローカル座標で取得します。 Vector3 GetBoneLocalPosition(HumanBodyBones bone, bool useParentBone = true) Parameters bone HumanBodyBones ボーン useParentBone bool true を指定した場合、bone で指定したボーンが存在しないと親ボーンの値を代わりに返します。 Returns Vector3 ボーンの位置 Remarks ローカル座標は親ボーンに対しての姿勢になります。 useParentBone が true である場合の挙動の詳細は GetBoneGlobalPosition(HumanBodyBones, bool) も参照してください。 GetBoneLocalRotation(HumanBodyBones, bool) 指定したボーンの回転をローカル座標で取得します。 Quaternion GetBoneLocalRotation(HumanBodyBones bone, bool useParentBone = true) Parameters bone HumanBodyBones ボーン useParentBone bool true を指定した場合、bone で指定したボーンが存在しないと親ボーンの値を代わりに返します。 Returns Quaternion ボーンの回転 Remarks ローカル座標は親ボーンに対しての姿勢になります。 useParentBone が true である場合の挙動の詳細は GetBoneGlobalPosition(HumanBodyBones, bool) も参照してください。 GetRootPosition() アバターの足元の位置をワールド座標の値として取得します。 Vector3 GetRootPosition() Returns Vector3 アバターの足元の位置 GetRootRotation() アバターの足元の回転をワールド座標の値として取得します。 Quaternion GetRootRotation() Returns Quaternion アバターの足元の回転 Remarks この値は identity に近い値であることが多いですが、 ゲーム入力モードによってアバターが正面以外の方向を向いている場合には、ヨー軸方向の回転が適用されます。 HasBone(HumanBodyBones) 現在ロードされているアバターに、指定したボーンが存在するかどうかを取得します。 bool HasBone(HumanBodyBones bone) Parameters bone HumanBodyBones Returns bool RightThumbProximal などのボーンはアバターによっては存在しない事があるため、そのボーンの存在判定が必要な場合にはこの関数を使用します。 アバターがロードされていない場合、この関数は bone の値と関係なく false を返します。"
  },
  "api/VMagicMirror.Buddy.IBounceDeformSpriteEffect.html": {
    "href": "api/VMagicMirror.Buddy.IBounceDeformSpriteEffect.html",
    "title": "Interface IBounceDeformSpriteEffect | VMagicMirror Buddy",
    "summary": "Interface IBounceDeformSpriteEffect Namespace VMagicMirror.Buddy 跳ねているような視覚効果を適用するエフェクトの設定です。 public interface IBounceDeformSpriteEffect Properties Duration エフェクトの開始～終了までの周期を秒単位で取得、設定します。値は [0.01, 5] の範囲で指定でき、デフォルト値は 0.5 です。 float Duration { get; set; } Property Value float Remarks すでにエフェクトが起動しているときに書き換えると動きが不連続になることがあります。 Intensity エフェクトの強度を取得、設定します。値は [0, 1] の範囲で指定でき、デフォルト値は 0.5 です。 float Intensity { get; set; } Property Value float Remarks 1 より大きい値も指定できますが、その場合は挙動が非常に極端になります。 IsActive エフェクトを動作させるかどうかを取得、設定します。true を設定することでエフェクトが動作します。 bool IsActive { get; set; } Property Value bool Remarks この値はスクリプトから直接更新することで変化する以外に、 Loop が false である場合には自動で true から false に切り替わります。 Loop エフェクトをループ実行するかどうかを取得、設定します。デフォルト値はtrueです。 bool Loop { get; set; } Property Value bool Remarks この値がtrueの場合、エフェクトはIsActiveをオフにするまで動作し続けます。 この値がfalseの場合、エフェクトが1周期ぶん動作すると自動でIsActiveがfalseに切り替わります。"
  },
  "api/VMagicMirror.Buddy.IDefaultSpritesSetting.html": {
    "href": "api/VMagicMirror.Buddy.IDefaultSpritesSetting.html",
    "title": "Interface IDefaultSpritesSetting | VMagicMirror Buddy",
    "summary": "Interface IDefaultSpritesSetting Namespace VMagicMirror.Buddy まばたき、口パクの画像差分を含むスプライト画像で構成されたデフォルト立ち絵を操作するための設定を定義します。 public interface IDefaultSpritesSetting Properties BlinkIntervalMax メインアバターと無関係にまばたきを行う場合のまばたきの最長間隔を秒単位で取得、設定します。 既定値は 20 です。 float BlinkIntervalMax { get; set; } Property Value float BlinkIntervalMin メインアバターと無関係にまばたきを行う場合のまばたきの最小間隔を秒単位で取得、設定します。 既定値は 10 です。 float BlinkIntervalMin { get; set; } Property Value float LocalPositionOffsetOnBlink まばたきを行ったときに一時的に位置を移動させるオフセットを取得、設定します。 Vector2 LocalPositionOffsetOnBlink { get; set; } Property Value Vector2 Remarks まばたきの挙動をより分かりするために、まばたきに合わせた位置オフセットを適用できます。 既定ではゼロではない値が適用されています。 画像の差分自体に位置ずれを適用しており、位置オフセットを追加することが望ましくない場合は、 この値を zero に設定します。 SyncBlinkBlendShapeToMainAvatar メインアバターの瞬きを考慮してサブキャラのまばたきを制御するかどうかを取得、設定します。 既定値は true です。 bool SyncBlinkBlendShapeToMainAvatar { get; set; } Property Value bool Remarks このフラグが有効な場合、メインアバターの瞬きに合わせてサブキャラが適当なディレイでまばたき動作を行います。 このフラグはメインアバターの状態を参照して動作します。 InteractionApiEnabled が false の場合、この値を設定していてもメインアバターとの同期は行われません。 SyncMouthBlendShapeToMainAvatar メインアバターのリップシンクを考慮してサブキャラのまばたき、口パク動作を制御するかどうかを取得、設定します。 既定値は true です。 bool SyncMouthBlendShapeToMainAvatar { get; set; } Property Value bool Remarks このフラグが有効な場合、メインアバターのリップシンクに対してサブキャラのデフォルト立ち絵をある程度動作させます。 このフラグはメインアバターの状態を参照して動作します。 InteractionApiEnabled が false の場合、この値を設定していてもメインアバターとの同期は行われません。"
  },
  "api/VMagicMirror.Buddy.IDeviceLayout.html": {
    "href": "api/VMagicMirror.Buddy.IDeviceLayout.html",
    "title": "Interface IDeviceLayout | VMagicMirror Buddy",
    "summary": "Interface IDeviceLayout Namespace VMagicMirror.Buddy アバターがいる空間内のキーボードなどのデバイスや、アバターウィンドウを撮影しているカメラの配置などのレイアウト情報を取得できるAPIです。 public interface IDeviceLayout Methods GetCameraFov() 画面を映しているカメラについて、視野角(Field of View)を度数法の値で取得します。 この視野角は垂直方向の視野角を表します。 float GetCameraFov() Returns float カメラの視野角 [deg] GetCameraPose() 画面を映しているカメラについて、現在の姿勢を取得します。 Pose GetCameraPose() Returns Pose カメラの姿勢 GetGamepadPose() 画面内に表示されるゲームパッドの基準位置の姿勢を取得します。 ゲームパッドが非表示の場合も姿勢を取得できます。 Pose GetGamepadPose() Returns Pose ゲームパッドの姿勢 GetGamepadVisible() ゲームパッドを表示中かどうかを取得します。 bool GetGamepadVisible() Returns bool ゲームパッドを表示中ならば true、そうでなければ false GetKeyboardPose() 画面内に表示されるキーボードの基準位置の姿勢を取得します。 キーボードが非表示の場合も姿勢を取得できます。 Pose GetKeyboardPose() Returns Pose キーボードの姿勢 GetKeyboardVisible() キーボードを表示中かどうかを取得します。 bool GetKeyboardVisible() Returns bool キーボードを表示中ならば true、そうでなければ false GetPenTabletPose() 画面内に表示されるペンタブレットの基準位置の姿勢を取得します。 ペンタブレットが非表示の場合も姿勢を取得できます。 Pose GetPenTabletPose() Returns Pose ペンタブレットの姿勢 GetPenTabletVisible() ペンタブレットを表示中かどうかを取得します。 bool GetPenTabletVisible() Returns bool ペンタブレットを表示中ならば true、そうでなければ false GetTouchpadPose() 画面内に表示されるタッチパッドの基準位置の姿勢を取得します。 タッチパッドが非表示の場合も姿勢を取得できます。 Pose GetTouchpadPose() Returns Pose タッチパッドの姿勢 GetTouchpadVisible() タッチパッドを表示中かどうかを取得します。 bool GetTouchpadVisible() Returns bool タッチパッドを表示中ならば true、そうでなければ false"
  },
  "api/VMagicMirror.Buddy.IFloatingSpriteEffect.html": {
    "href": "api/VMagicMirror.Buddy.IFloatingSpriteEffect.html",
    "title": "Interface IFloatingSpriteEffect | VMagicMirror Buddy",
    "summary": "Interface IFloatingSpriteEffect Namespace VMagicMirror.Buddy 浮遊しているような視覚効果を適用するエフェクトの設定です。 public interface IFloatingSpriteEffect Properties Duration エフェクトの開始～終了までの周期を取得、設定します。0.1 以上の値が指定でき、デフォルト値は 5 です。 float Duration { get; set; } Property Value float Remarks すでにエフェクトが起動しているときに書き換えると動きが不連続になることがあります。 Intensity スプライトの上昇幅を取得します。デフォルト値は 20 です。 float Intensity { get; set; } Property Value float IsActive エフェクトを動作させるかどうかを取得、設定します。true を設定することでエフェクトが動作します。 bool IsActive { get; set; } Property Value bool"
  },
  "api/VMagicMirror.Buddy.IGlb.html": {
    "href": "api/VMagicMirror.Buddy.IGlb.html",
    "title": "Interface IGlb | VMagicMirror Buddy",
    "summary": "Interface IGlb Namespace VMagicMirror.Buddy GLB形式の3Dモデルの読み込みと操作に関するAPIです。 本APIは作成途上のものであり、VMagicMirror v4.0.0の時点では本APIは利用できません。 public interface IGlb Remarks VMagicMirror v4.0.0の時点では機能整備が完了していないため、本APIの利用手段は提供していません。 ここでは、想定している機能を提示する目的でドキュメントを公開しています。 VRMやGLBによる3Dオブジェクトをサブキャラとして表示する機能は、 v4.0.0 以降のマイナーアップデートとして提供予定です。 Properties Transform オブジェクトの基本姿勢に関する値を取得します。 ITransform3D Transform { get; } Property Value ITransform3D Methods GetAnimationNames() 読み込んだGLBデータに定義されたアニメーションの名称を取得します。 string[] GetAnimationNames() Returns string[] アニメーション名の一覧 Remarks Load(string)よりも前にこの関数を呼び出した場合や、GLBデータにアニメーションが定義されていない場合は空の配列を取得します。 Hide() オブジェクトを非表示にします。 void Hide() Load(string) ファイルパスを指定して3Dデータをロードし、表示します。 void Load(string path) Parameters path string GLB RunAnimation(string, bool) 名前を指定してアニメーションを実行します。 void RunAnimation(string name, bool isLoop) Parameters name string アニメーション名 isLoop bool ループ再生を行うかどうか Remarks この関数で開始させたアニメーションは、アニメーションの実行完了、または別のアニメーションの開始、 または StopAnimation() の呼び出しによって停止します。 読み込んだGLBデータに定義されていないアニメーション名を指定して呼び出した場合は何も起こりません。 Show() オブジェクトを表示します。Hide() 関数で void Show() StopAnimation() RunAnimation(string, bool) で実行したアニメーションを停止します。 void StopAnimation() Remarks アニメーションがすでに停止している場合、この関数を呼んでもとくに何も起こりません。 この関数でアニメーションを停止させると、オブジェクトの見た目が不連続に変化することがあります。"
  },
  "api/VMagicMirror.Buddy.IGui.html": {
    "href": "api/VMagicMirror.Buddy.IGui.html",
    "title": "Interface IGui | VMagicMirror Buddy",
    "summary": "Interface IGui Namespace VMagicMirror.Buddy public interface IGui Methods CreateGuiArea() IGuiArea CreateGuiArea() Returns IGuiArea"
  },
  "api/VMagicMirror.Buddy.IGuiArea.html": {
    "href": "api/VMagicMirror.Buddy.IGuiArea.html",
    "title": "Interface IGuiArea | VMagicMirror Buddy",
    "summary": "Interface IGuiArea Namespace VMagicMirror.Buddy public interface IGuiArea Properties Pivot Vector2 Pivot { get; set; } Property Value Vector2 Position Vector2 Position { get; set; } Property Value Vector2 Size Vector2 Size { get; set; } Property Value Vector2 Transform ITransform2D Transform { get; } Property Value ITransform2D Methods SetActive(bool) void SetActive(bool active) Parameters active bool ShowText(string, bool) void ShowText(string content, bool immediate) Parameters content string immediate bool"
  },
  "api/VMagicMirror.Buddy.IInput.html": {
    "href": "api/VMagicMirror.Buddy.IInput.html",
    "title": "Interface IInput | VMagicMirror Buddy",
    "summary": "Interface IInput Namespace VMagicMirror.Buddy キーボード、マウス、ゲームパッドなどの入力状態を取得できるAPIです。 public interface IInput Remarks このAPIの機能はアバター出力の一部として扱われます。 そのため、アバター出力の取得が許可されていない環境ではイベントは発火せず、値は Vector2.zero などの無効な値を返却します。 Properties GamepadLeftStick ゲームパッドの左スティックの値を取得します。 Vector2 GamepadLeftStick { get; } Property Value Vector2 Remarks x成分は左が -1、右が 1 に対応します。 y成分は下が -1、上が 1 に対応します。 取得できるベクトルの magnitude は1以下の値になります。 GamepadRightStick ゲームパッドの右スティックの値を取得します。 Vector2 GamepadRightStick { get; } Property Value Vector2 Remarks x成分は左が -1、右が 1 に対応します。 y成分は下が -1、上が 1 に対応します。 取得できるベクトルの magnitude は1以下の値になります。 MousePosition マウスポインターの現在の位置を、画面座標を基準として取得します。 Vector2 MousePosition { get; } Property Value Vector2 Remarks x成分は左端が -0.5、右端が 0.5 を表すような値です。 y成分は下端が -0.5、上端が 0.5 を表すような値です。 値が0より小さいか、または1より大きい場合、マウスポインターがウィンドウの外側にあることを表します。 Methods GetGamepadButton(GamepadButton) 指定したゲームパッドのボタンを押しているかどうかを取得します。 bool GetGamepadButton(GamepadButton key) Parameters key GamepadButton 確認したいゲームパッドのボタン Returns bool 指定したボタンを現在押している状態であれば true、そうでなければ false Events GamepadButtonDown ゲームパッドのボタンが押されると発火します。 event Action<GamepadButton> GamepadButtonDown Event Type Action<GamepadButton> GamepadButtonUp ゲームパッドのボタンが離されると発火します。 event Action<GamepadButton> GamepadButtonUp Event Type Action<GamepadButton> KeyboardKeyDown キーボードのキーを押し下げると発火します。 event Action<string> KeyboardKeyDown Event Type Action<string> Remarks キー名はENTERキーの打鍵時に \"Enter\" を引数とします。 それ以外のキーについては、打鍵時してもキー名は特定できず、空文字列が引数となります。 ユーザーが打鍵をランダム表示するオプションを有効にしている場合、常に空文字列が引数になります。 KeyboardKeyUp キーボードのキーを離すと発火します。 event Action<string> KeyboardKeyUp Event Type Action<string> Remarks キー名はENTERキーの打鍵時に \"Enter\" を引数とします。 それ以外のキーについては、打鍵時してもキー名は特定できず、空文字列が引数となります。 ユーザーが打鍵をランダム表示するオプションを有効にしている場合、常に空文字列が引数になります。"
  },
  "api/VMagicMirror.Buddy.IJumpSpriteEffect.html": {
    "href": "api/VMagicMirror.Buddy.IJumpSpriteEffect.html",
    "title": "Interface IJumpSpriteEffect | VMagicMirror Buddy",
    "summary": "Interface IJumpSpriteEffect Namespace VMagicMirror.Buddy ジャンプ動作を適用するエフェクトの設定です。 public interface IJumpSpriteEffect Methods Jump(float, float, int) ジャンプ動作を行います。 void Jump(float duration, float height, int count) Parameters duration float 動作を行う時間を秒数として指定します。 height float ジャンプの高さを指定します。この値は Size を参考に指定します。 count int 時間内に行うジャンプの回数 Remarks count が2以上である場合、duration の時間内に複数回のジャンプ動作を行います。 ジャンプの軌道は放物軌道として、指定したパラメータから自動で計算されます。 Stop() ジャンプ動作を停止します。 void Stop() Remarks この関数を呼び出すとスプライトの位置が不連続に移動することがあります。"
  },
  "api/VMagicMirror.Buddy.IManifestTransforms.html": {
    "href": "api/VMagicMirror.Buddy.IManifestTransforms.html",
    "title": "Interface IManifestTransforms | VMagicMirror Buddy",
    "summary": "Interface IManifestTransforms Namespace VMagicMirror.Buddy manifest.json で定義され、ユーザーがレイアウトを編集可能な2Dまたは3DのTransform情報を取得できるAPIです。 public interface IManifestTransforms Methods GetTransform2D(string) 名称を指定して、2DのTransformへの参照を取得します。 IReadOnlyTransform2D GetTransform2D(string key) Parameters key string Transformの名称 Returns IReadOnlyTransform2D keyが実際に定義されていればそれに対応するTransformの参照、そうでなければnull GetTransform3D(string) 名称を指定して、3DのTransformへの参照を取得します。 IReadOnlyTransform3D GetTransform3D(string key) Parameters key string Transformの名称 Returns IReadOnlyTransform3D keyが実際に定義されていればそれに対応するTransformの参照、そうでなければnull"
  },
  "api/VMagicMirror.Buddy.IMathUtil.html": {
    "href": "api/VMagicMirror.Buddy.IMathUtil.html",
    "title": "Interface IMathUtil | VMagicMirror Buddy",
    "summary": "Interface IMathUtil Namespace VMagicMirror.Buddy 数学的な処理を提供するAPIです。 public interface IMathUtil Methods GetScreenPositionOfWorldPoint(Vector3) ワールド上の位置を画面から見た座標に変換します。 Vector2 GetScreenPositionOfWorldPoint(Vector3 position) Parameters position Vector3 ワールド上の座標 Returns Vector2 画面上の座標 Remarks 画面上の座標について、x成分は左端を0、右端を1とする値になります。y成分は下端を0、上端を1とする値になります。 画面外になるような座標を指定した場合、計算結果のx成分やy成分は [0, 1] の範囲を超えることがあります。"
  },
  "api/VMagicMirror.Buddy.IO.Directory.html": {
    "href": "api/VMagicMirror.Buddy.IO.Directory.html",
    "title": "Class Directory | VMagicMirror Buddy",
    "summary": "Class Directory Namespace VMagicMirror.Buddy.IO ディレクトリに関連したAPIを提供します。 public static class Directory Inheritance object Directory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks VMagicMirrorではスクリプトを安全に実行しやすくするため、System.IO 系のAPIを直接使うことは制限されています。 このクラスではディレクトリの存在判定など、比較的安全に実行できるAPIを、 System.IO のAPIと等価に提供します。 各メソッドの説明については Directory の同名のメソッドを参照して下さい。 サブキャラのスクリプトで本クラスによってファイルパスを扱う場合、原則として絶対パスを使用して下さい。 スクリプトのカレントディレクトリが main.csx のあるフォルダと一致することは保証されていません。 Methods Exists(string) public static bool Exists(string path) Parameters path string Returns bool GetDirectories(string) public static string[] GetDirectories(string path) Parameters path string Returns string[] GetDirectories(string, string) public static string[] GetDirectories(string path, string searchPattern) Parameters path string searchPattern string Returns string[] GetFiles(string) public static string[] GetFiles(string path) Parameters path string Returns string[] GetFiles(string, string) public static string[] GetFiles(string path, string searchPattern) Parameters path string searchPattern string Returns string[]"
  },
  "api/VMagicMirror.Buddy.IO.File.html": {
    "href": "api/VMagicMirror.Buddy.IO.File.html",
    "title": "Class File | VMagicMirror Buddy",
    "summary": "Class File Namespace VMagicMirror.Buddy.IO ファイルに関連したAPIを提供します。 public static class File Inheritance object File Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks このクラスではファイルの存在判定や読み取り専用の処理など、比較的安全に実行できるAPIを System.IO のAPIと等価に提供します。 VMagicMirrorではスクリプトを安全に実行しやすくするため、System.IO 系のAPIを直接使うことは制限されています。 各メソッドの説明については File の同名のメソッドを参照して下さい。 サブキャラのスクリプトで本クラスによってファイルパスを扱う場合、原則として絶対パスを使用して下さい。 スクリプトのカレントディレクトリが main.csx のあるフォルダと一致することは保証されていません。 Methods Exists(string) public static bool Exists(string path) Parameters path string Returns bool ReadAllBytes(string) public static byte[] ReadAllBytes(string path) Parameters path string Returns byte[] ReadAllLines(string) public static string[] ReadAllLines(string path) Parameters path string Returns string[] ReadAllLines(string, Encoding) public static string[] ReadAllLines(string path, Encoding encoding) Parameters path string encoding Encoding Returns string[] ReadAllText(string) public static string ReadAllText(string path) Parameters path string Returns string ReadAllText(string, Encoding) public static string ReadAllText(string path, Encoding encoding) Parameters path string encoding Encoding Returns string"
  },
  "api/VMagicMirror.Buddy.IO.Path.html": {
    "href": "api/VMagicMirror.Buddy.IO.Path.html",
    "title": "Class Path | VMagicMirror Buddy",
    "summary": "Class Path Namespace VMagicMirror.Buddy.IO ファイルパスに関連したAPIを提供します。 public static class Path Inheritance object Path Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks VMagicMirrorではスクリプトを安全に実行しやすくするため、System.IO 系のAPIを直接使うことは制限されています。 このクラスではPathの比較的安全に実行できるAPIを、 System.IO のAPIと等価に提供します。 各メソッドの説明については Directory の同名のメソッドを参照して下さい。 サブキャラのスクリプトで本クラスによってファイルパスを扱う場合、原則として絶対パスを使用して下さい。 スクリプトのカレントディレクトリが main.csx のあるフォルダと一致することは保証されていません。 Methods Combine(string, string) public static string Combine(string path1, string path2) Parameters path1 string path2 string Returns string Combine(string, string, string) public static string Combine(string path1, string path2, string path3) Parameters path1 string path2 string path3 string Returns string Combine(string, string, string, string) public static string Combine(string path1, string path2, string path3, string path4) Parameters path1 string path2 string path3 string path4 string Returns string Combine(params string[]) public static string Combine(params string[] paths) Parameters paths string[] Returns string GetDirectoryName(string) public static string GetDirectoryName(string path) Parameters path string Returns string GetExtension(string) public static string GetExtension(string path) Parameters path string Returns string GetFileName(string) public static string GetFileName(string path) Parameters path string Returns string GetFileNameWithoutExtension(string) public static string GetFileNameWithoutExtension(string path) Parameters path string Returns string GetFullPath(string) public static string GetFullPath(string path) Parameters path string Returns string"
  },
  "api/VMagicMirror.Buddy.IO.html": {
    "href": "api/VMagicMirror.Buddy.IO.html",
    "title": "Namespace VMagicMirror.Buddy.IO | VMagicMirror Buddy",
    "summary": "Namespace VMagicMirror.Buddy.IO Classes Directory ディレクトリに関連したAPIを提供します。 File ファイルに関連したAPIを提供します。 Path ファイルパスに関連したAPIを提供します。"
  },
  "api/VMagicMirror.Buddy.IProperty.html": {
    "href": "api/VMagicMirror.Buddy.IProperty.html",
    "title": "Interface IProperty | VMagicMirror Buddy",
    "summary": "Interface IProperty Namespace VMagicMirror.Buddy マニフェストで定義されたプロパティ値を取得できるAPIです。 public interface IProperty Remarks サブキャラの設定として、表示位置や仕草のスピードなど、エンドユーザーが編集や調整を行うプロパティを公開し、このAPIでその調整後の値を取得できます。 manifest.json にプロパティを定義する方法については サブキャラの基本設定を定義する を参照して下さい。 Methods GetBool(string) bool値として定義したプロパティの現在値を取得します。 bool GetBool(string key) Parameters key string プロパティ名 Returns bool プロパティの現在値 Remarks 指定したキーがマニフェスト上で定義されていない場合、この関数は false を返します。 GetFloat(string) bool値として定義したプロパティの現在値を取得します。 float GetFloat(string key) Parameters key string プロパティ名 Returns float プロパティの現在値 Remarks 指定したキーがマニフェスト上で定義されていない場合、この関数は 0 を返します。 GetInt(string) int値として定義したプロパティの現在値を取得します。 int GetInt(string key) Parameters key string プロパティ名 Returns int プロパティの現在値 Remarks 指定したキーがマニフェスト上で定義されていない場合、この関数は 0 を返します。 GetQuaternion(string) Quaternion の値として定義したプロパティの現在値を取得します。 Quaternion GetQuaternion(string key) Parameters key string プロパティ名 Returns Quaternion プロパティの現在値 Remarks 指定したキーがマニフェスト上で定義されていない場合、この関数は identity を返します。 GetString(string) string値として定義したプロパティの現在値を取得します。 string GetString(string key) Parameters key string プロパティ名 Returns string プロパティの現在値 Remarks 指定したキーがマニフェスト上で定義されていない場合、この関数は空文字列を返します。 GetVector2(string) Vector2 の値として定義したプロパティの現在値を取得します。 Vector2 GetVector2(string key) Parameters key string プロパティ名 Returns Vector2 プロパティの現在値 Remarks 指定したキーがマニフェスト上で定義されていない場合、この関数は zero を返します。 GetVector3(string) Vector3 の値として定義したプロパティの現在値を取得します。 Vector3 GetVector3(string key) Parameters key string プロパティ名 Returns Vector3 プロパティの現在値 Remarks 指定したキーがマニフェスト上で定義されていない場合、この関数は zero を返します。 Events ActionRequested action値として定義したプロパティのボタン入力が行われたときに発火します。 引数はマニフェストで定義した name の値になります。 event Action<string> ActionRequested Event Type Action<string>"
  },
  "api/VMagicMirror.Buddy.IPuniSpriteEffect.html": {
    "href": "api/VMagicMirror.Buddy.IPuniSpriteEffect.html",
    "title": "Interface IPuniSpriteEffect | VMagicMirror Buddy",
    "summary": "Interface IPuniSpriteEffect Namespace VMagicMirror.Buddy x軸に伸びながらy軸方向に縮む、またその逆を行うような、ぷにぷにする視覚効果を適用するエフェクトの設定です。 public interface IPuniSpriteEffect Properties Duration エフェクトの開始～終了までの周期を秒単位で取得、設定します。値は [0.01, 5] の範囲で指定でき、デフォルト値は 0.5 です。 float Duration { get; set; } Property Value float Remarks すでにエフェクトが起動しているときに書き換えると動きが不連続になることがあります。 Intensity エフェクトの強度を 0 以上の値として取得、設定します。デフォルト値は 0.1 です。 float Intensity { get; set; } Property Value float Remarks 値が 0 の場合、このエフェクトは動作しません。 IsActive エフェクトを動作させるかどうかを取得、設定します。true を設定することでエフェクトが動作します。 bool IsActive { get; set; } Property Value bool"
  },
  "api/VMagicMirror.Buddy.IReadOnlyTransform2D.html": {
    "href": "api/VMagicMirror.Buddy.IReadOnlyTransform2D.html",
    "title": "Interface IReadOnlyTransform2D | VMagicMirror Buddy",
    "summary": "Interface IReadOnlyTransform2D Namespace VMagicMirror.Buddy 現在の姿勢やアバターの親ボーンのアタッチ先を読み取り可能なTransform情報です。 とくに、マニフェストの定義に基づいて生成され、ユーザーがレイアウトを編集できる2DのTransform情報がこのinterfaceの値として表現されます。 public interface IReadOnlyTransform2D Properties LocalPosition オブジェクトの現在のローカル位置を取得します。 Vector2 LocalPosition { get; } Property Value Vector2 Remarks このオブジェクトに親オブジェクトがない場合、このプロパティは Position と同じ値を返します。 そうでない場合、親オブジェクトを基準としたローカル位置を返します。 基本的な座標系については Position の説明を参照してください。 LocalRotation オブジェクトの現在のローカル回転を取得します。 Quaternion LocalRotation { get; } Property Value Quaternion Remarks このオブジェクトに親オブジェクトがない場合、このプロパティは Rotation と同じ値を返します。 そうでない場合、親オブジェクトを基準としたローカル回転を返します。 回転の方向については Rotation の説明を参照してください。 LocalScale オブジェクトのスケールを取得します。 Vector2 LocalScale { get; } Property Value Vector2 Remarks このオブジェクトに親オブジェクトがある場合でも、親オブジェクトのスケールは考慮されません。 Position オブジェクトの画面上での位置を取得します。 Vector2 Position { get; } Property Value Vector2 Remarks この値は、アバターウィンドウのサイズをおおよそ1280x720として画面の左下を (0, 0) とした座標系で表現されます。 xの値は画面の左端で 0 付近の値を取り、画面の右端で 1280 付近の値を取ります。 yの値は画面の下端で 0 付近の値を取り、画面の上端で 720 付近の値を取ります。 Rotation 回転を取得します。 Quaternion Rotation { get; } Property Value Quaternion Remarks 回転はそれぞれ以下の方向を表します。 z軸まわりの回転は画面に対して平面的な回転です。 x軸およびy軸まわりの回転は3次元的であり、このオブジェクトに ISprite2D が紐づく場合、その画像は遠近のついた表示になります。 x軸: 画面の左右方向を軸とする回転 z軸: 画面の上下方向を軸とする回転 z軸: 画面と垂直な方向を軸とする回転"
  },
  "api/VMagicMirror.Buddy.IReadOnlyTransform3D.html": {
    "href": "api/VMagicMirror.Buddy.IReadOnlyTransform3D.html",
    "title": "Interface IReadOnlyTransform3D | VMagicMirror Buddy",
    "summary": "Interface IReadOnlyTransform3D Namespace VMagicMirror.Buddy 現在の姿勢やアバターの親ボーンのアタッチ先を読み取り可能なTransform情報です。 とくに、マニフェストの定義に基づいて生成され、ユーザーがレイアウトを編集できる3DのTransform情報がこのinterfaceの値として表現されます。 public interface IReadOnlyTransform3D Remarks このTransformの配置先は AttachedBone プロパティの値によって変化します。 AttachedBone が None である場合、またはアバターがロードされていない場合、 Transformは空間上に直接配置されており、親オブジェクトはありません。 AttachedBone が None 以外であり、かつアバターがロード済みの場合、このTransformは指定されたボーンの子要素となります。 AttachedBone が任意ボーンであり、かつボーンが存在しなかった場合、このTransformは任意ボーンの親になるような有効なボーンの子要素となります。 Properties AttachedBone アバターに対して、このTransformをアタッチするボーンを取得します。 HumanBodyBones AttachedBone { get; } Property Value HumanBodyBones Remarks Transformをアバターにアタッチしないように設定されている場合、このプロパティは None を返します。 この値が任意ボーンを指しており、かつアバターにそのボーンがない場合、実際には親ボーンに対してTransformがアタッチされます。 詳しくは IReadOnlyTransform3D の説明を参照してください。 LocalPosition Transformの位置をローカル座標の値として取得します。 Vector3 LocalPosition { get; } Property Value Vector3 Remarks ローカル座標の基準となる親オブジェクトの有無は AttachedBone の値によって変化します。 詳しくは IReadOnlyTransform3D の説明を参照してください。 LocalRotation Transformの回転をローカル座標の値として取得します。 Quaternion LocalRotation { get; } Property Value Quaternion Remarks ローカル座標の基準となる親オブジェクトの有無は AttachedBone の値によって変化します。 詳しくは IReadOnlyTransform3D の説明を参照してください。 LocalScale ローカルスケールを取得します。 Vector3 LocalScale { get; } Property Value Vector3 Position Transformの位置をワールド座標の値として取得します。 Vector3 Position { get; } Property Value Vector3 Rotation Transformの回転をワールド座標の値として取得します。 Quaternion Rotation { get; } Property Value Quaternion"
  },
  "api/VMagicMirror.Buddy.IRootApi.html": {
    "href": "api/VMagicMirror.Buddy.IRootApi.html",
    "title": "Interface IRootApi | VMagicMirror Buddy",
    "summary": "Interface IRootApi Namespace VMagicMirror.Buddy スクリプトから Api 変数としてアクセスできるような、サブキャラの制御に利用できるAPI群です。 public interface IRootApi Properties Audio 音声ファイルの再生に関するAPIを取得します。 IAudio Audio { get; } Property Value IAudio Remarks v4.0.0の時点でこのAPIはサウンドエフェクト等、短い音声の再生のみを想定したAPIとなっています。 AvatarFacial アバターの表情に関するAPIを取得します。 IAvatarFacial AvatarFacial { get; } Property Value IAvatarFacial AvatarLoadEvent アバターのロード状態や、ロード状態に関するイベントのAPIを取得します。 IAvatarLoadEvent AvatarLoadEvent { get; } Property Value IAvatarLoadEvent AvatarMotionEvent アバターの動作をイベントとして検出するAPIを取得します。 IAvatarMotionEvent AvatarMotionEvent { get; } Property Value IAvatarMotionEvent AvatarPose アバターの姿勢に関するAPIを取得します。 IAvatarPose AvatarPose { get; } Property Value IAvatarPose BuddyDirectory このサブキャラのデータが入っているディレクトリの絶対パスを取得します。 string BuddyDirectory { get; } Property Value string Remarks このプロパティは main.csx スクリプトを含むディレクトリの絶対パスを返します。 静的なデータ定義を行ったテキストなど、サブキャラに同梱したファイルがある場合はこのディレクトリを参照してファイルを読み込めます。 Show(string) 等では、パスを相対パスとして評価する場合、このプロパティで取得できるディレクトリからの相対パスとして評価します。 そのため、サブキャラのオブジェクトを単に表示する場合、必ずしもこのプロパティを参照する必要はありません。 DeviceLayout アバターの周辺のデバイス配置に関するAPIを取得します。 IDeviceLayout DeviceLayout { get; } Property Value IDeviceLayout Input ユーザーの入力に関するAPIを取得します。 IInput Input { get; } Property Value IInput InteractionApiEnabled メインアバターの姿勢や表情、およびユーザーのマイク入力などを取り扱えるインタラクションAPI全般にアクセス可能かどうかを取得します。 bool InteractionApiEnabled { get; } Property Value bool Remarks この値はアプリケーションのEditionおよびユーザー設定によって変化します。 値が false の場合、 AvatarMotionEvent のイベントが発火しなかったり、 AvatarPose で有効なポーズが取得できなかったりする状態になります。 ユーザー入力がないと進行不能になってしまうような挙動をサブキャラに対して実装する場合、 このフラグも組み合わせて挙動をカスタムすることで意図しないスタックを防げます。 Language アプリケーションに適用されている言語を取得します。 AppLanguage Language { get; } Property Value AppLanguage Remarks VMagicMirrorのローカライズシステムの実装都合により、この値は日本語・英語以外の言語選択を行うと Unknown を返します。 多くの言語に対応できるようなサブキャラを作成する場合、このプロパティの代わりに IProperty によって ユーザーが言語選択を別途選択できるようにすることも検討して下さい。 MainThreadContext アプリケーションのメインスレッドのコンテキストを取得します。 SynchronizationContext MainThreadContext { get; } Property Value SynchronizationContext Remarks スクリプト上で非同期処理を行った結果をスプライトやVRMアバターに適用したい場合、メインスレッドに処理を戻るときに使用できます。 より簡単にメインスレッドへアクセスしたい場合、変わりに RunOnMainThread(Func<Task>) を使用することを検討してください。 Property マニフェストで定義されたプロパティにアクセスできるAPIを取得します。 IProperty Property { get; } Property Value IProperty Screen アバターを表示しているウィンドウに関するAPIを取得します。 IScreen Screen { get; } Property Value IScreen Transforms マニフェストで定義されたTransformの参照にアクセスできるAPIを取得します。 IManifestTransforms Transforms { get; } Property Value IManifestTransforms Methods Create2DSprite() アバターウィンドウの最前面に画像を表示するためのスプライトのインスタンスを生成します。 ISprite2D Create2DSprite() Returns ISprite2D Remarks 空間上へ3次元的に板状の画像を表示したい場合、代わりに Create3DSprite() を使用します。 Create3DSprite() 画像を空間上で板状のオブジェクトとして配置するためのスプライトのインスタンスを生成します。 ISprite3D Create3DSprite() Returns ISprite3D Remarks 平面的に画像を表示したい場合、代わりに Create2DSprite() を使用します。 GetCancellationTokenOnDisabled() サブキャラが終了するときにキャンセル扱いされるようなCancellationTokenを取得します。 CancellationToken GetCancellationTokenOnDisabled() Returns CancellationToken Remarks サブキャラの挙動として非同期処理を実装する場合、この値を使用することで、サブキャラが意図せず実行され続けることを防止できます。 InvokeDelay(Action, float) 指定した処理を、指定された秒数のあとで実行します。 void InvokeDelay(Action func, float delaySeconds) Parameters func Action 実行したい関数 delaySeconds float 実行のディレイ秒数 Remarks このメソッドは、メインアバターの仕草を検出したとき、やや遅れてリアクションを取る場合などに有効です。 InvokeInterval(Action, float) 指定した処理を、指定された間隔で実行します。 void InvokeInterval(Action func, float intervalSeconds) Parameters func Action 実行したい関数 intervalSeconds float 実行間隔の秒数 Remarks このメソッドは、Updateより低頻度で処理を実行したい場合などに有効です。 このメソッドを呼び出すと、直ちに func が1回実行されます。 初回の呼び出しを遅延させる場合、 InvokeInterval(Action, float, float) を使用します。 InvokeInterval(Action, float, float) 指定した処理を、指定された間隔で実行します。 void InvokeInterval(Action func, float intervalSeconds, float firstDelay) Parameters func Action 実行したい関数 intervalSeconds float 実行間隔の秒数 firstDelay float 初回に処理を実行するまでの遅延の秒数 Remarks このメソッドは、Updateより低頻度で処理を実行したい場合などに有効です。 Log(string) ログ情報を出力します。 void Log(string value) Parameters value string Remarks ログファイルは VMagicMirror_Files/Logs/{buddy_name}.txt として出力されます。 buddy_name には、サブキャラのデータを格納しているフォルダ名が入ります。 このメソッドで出力するログは、VMagicMirrorのサブキャラ設定で開発者モードを有効にし、ログ詳細度を Info かそれより詳細なレベルに設定した場合のみ出力されます。 LogError(string) エラー相当のログ情報を出力します。 void LogError(string value) Parameters value string Remarks ログファイルは VMagicMirror_Files/Logs/{buddy_name}.txt として出力されます。 buddy_name には、サブキャラのデータを格納しているフォルダ名が入ります。 このメソッドで出力するログは、VMagicMirrorのサブキャラ設定で開発者モードがオフであるか、または開発者モードでログ詳細度を Error かそれより詳細なレベルに設定した場合のみ出力されます。 LogWarning(string) 警告相当のログ情報を出力します。 void LogWarning(string value) Parameters value string Remarks ログファイルは VMagicMirror_Files/Logs/{buddy_name}.txt として出力されます。 buddy_name には、サブキャラのデータを格納しているフォルダ名が入ります。 このメソッドで出力するログは、VMagicMirrorのサブキャラ設定で開発者モードを有効にし、ログ詳細度を Warning かそれより詳細なレベルに設定した場合のみ出力されます。 Random() 0以上、1未満のランダムな値を取得します。 float Random() Returns float RunOnMainThread(Func<Task>) 指定したタスクをメインスレッドで実行します。 void RunOnMainThread(Func<Task> task) Parameters task Func<Task> メインスレッドで実行したいタスク Remarks VMagicMirrorはUnity Engineで実行されており、VRMやスプライトの操作はゲームエンジンのメインスレッド上で行う必要があります。 スクリプト上でTaskによる非同期処理を行う場合、このメソッドを用いることで、非同期処理の結果をサブキャラに適用しやすくなります。 Events Start サブキャラのロード後に一度だけ呼ばれます。 event Action Start Event Type Action Remarks Update の最初の呼び出しよりも前に呼ばれることが保証されます。 Update 毎フレームごと、つまり描画内容の更新のたびに呼ばれます。 引数には、前回のフレームからの経過時間が秒単位で渡されます。 event Action<float> Update Event Type Action<float> Remarks 引数は通常、 1/60 に近い値になります。 このイベントは毎フレーム呼ばれるため、長時間かかる処理をイベントハンドラとして実行するのは避けるようにしてください。"
  },
  "api/VMagicMirror.Buddy.IScreen.html": {
    "href": "api/VMagicMirror.Buddy.IScreen.html",
    "title": "Interface IScreen | VMagicMirror Buddy",
    "summary": "Interface IScreen Namespace VMagicMirror.Buddy アバターを表示しているウィンドウの状態に関するAPIです。 public interface IScreen Properties Height ウィンドウの縦幅をピクセル単位で取得します。 int Height { get; } Property Value int Remarks この値はモニターのDPIや解像度によって変化します。 Widthと合わせて、アスペクト比の確認などに使用できます。 IsTransparent ウィンドウが透過表示の状態になっていれば true、そうでなければ false を取得します。 bool IsTransparent { get; } Property Value bool Width ウィンドウの横幅をピクセル単位で取得します。 int Width { get; } Property Value int Remarks この値はモニターのDPIや解像度によって変化します。 Heightと合わせて、アスペクト比の確認などに使用できます。"
  },
  "api/VMagicMirror.Buddy.ISprite2D.html": {
    "href": "api/VMagicMirror.Buddy.ISprite2D.html",
    "title": "Interface ISprite2D | VMagicMirror Buddy",
    "summary": "Interface ISprite2D Namespace VMagicMirror.Buddy 画像をアバターウィンドウの最前面に平面的に表示するAPIです。 public interface ISprite2D Remarks このAPIでは .jpg または .png ファイル、およびプリセットとしてアプリケーションに組み込まれた画像をロードできます。 画像のサイズ等は画面全体のサイズがおおよそ 1280x720 であるとした場合の値を用いて指定します。 サイズ調整を直感的に行うために、画像アセットとスプライトはいずれも正方形の形状にしておくことを推奨しています。 また、サブキャラに表情差分などの画像群がある場合、原則として各画像のサイズを揃えるようにしてください。 Properties DefaultSpritesSetting SetupDefaultSprites(string, string, string, string) や ShowDefaultSprites(Sprite2DTransitionStyle, float) を用いて適用できる、 デフォルトの立ち絵についての動作の設定を取得します。 IDefaultSpritesSetting DefaultSpritesSetting { get; } Property Value IDefaultSpritesSetting Effects スプライトに適用するエフェクトの設定を取得します。 ISpriteEffect Effects { get; } Property Value ISpriteEffect Size スプライトのサイズを取得、設定します。 Vector2 Size { get; set; } Property Value Vector2 Remarks サイズは、アバターウィンドウ全体のサイズがおおよそ 1280x720 であるとした場合の値として指定します。 例えば、new Vector2(150, 150) 程度の値はスプライトの基本的なサイズとして適しています。 Transform 位置や回転などの、オブジェクトの基本的な配置に関するAPIを取得します。 ITransform2D Transform { get; } Property Value ITransform2D Methods Hide() サブキャラを非表示にします。 void Hide() Preload(string) ファイルパスを指定して画像を事前にロードします。 void Preload(string path) Parameters path string 画像ファイルのパス Remarks この関数をサブキャラのロード直後に呼び出すことで、サブキャラの動作中の画像切り替えがスムーズに行えます。 SetupDefaultSprites(string, string, string, string) まばたき、および口の開閉の組み合わせからなる4枚の画像を指定することで、 サブキャラの基本となる立ち絵スプライトをセットアップします。 void SetupDefaultSprites(string defaultImagePath, string blinkImagePath, string mouthOpenImagePath, string blinkMouthOpenImagePath) Parameters defaultImagePath string 目を開き、口を閉じている立ち絵の画像ファイルのパス blinkImagePath string 目を閉じ、口を開いている立ち絵の画像ファイルのパス mouthOpenImagePath string 目を開き、口を開いている立ち絵の画像ファイルのパス blinkMouthOpenImagePath string 目を閉じ、口を開いている立ち絵の画像ファイルのパス Remarks この関数はセットアップのために一度だけ呼び出します。 その後、 ShowDefaultSprites(Sprite2DTransitionStyle, float) を呼び出すことで指定した画像が表示されます。 簡易的なセットアップでサブキャラのまばたき、口パクを動かしたい場合、この関数で基本の立ち絵をセットアップします。 まばたきや口パクをより詳細に制御したい場合、このメソッドは使用せず、代わりに Show(string) や Show(string, Sprite2DTransitionStyle, float) を使用します。 SetupDefaultSpritesByPreset() サブキャラの立ち絵スプライトとして、プリセットで定義されたキャラクター画像を適用します。 void SetupDefaultSpritesByPreset() Remarks このメソッドではプリセットのサブキャラを立ち絵として適用します。 Show(string) ファイルパスを指定して画像を表示します。 void Show(string path) Parameters path string 画像ファイルのパス Remarks このメソッドでは画像は指定されたものへ直ちに切り替わります。 アニメーションを適用しながら画像を切り替えたい場合は Show(string, Sprite2DTransitionStyle, float) を使用します。 Show(string, Sprite2DTransitionStyle, float) ファイルパスと切り替え演出を指定して画像を表示します。 void Show(string path, Sprite2DTransitionStyle style, float duration) Parameters path string 画像ファイルのパス style Sprite2DTransitionStyle 画像切り替えのスタイル。。 duration float 画像切り替え動作を実行する秒数。0以下の値を指定した場合、ただちに画像が切り替わります。 Remarks Preload(string) を呼び出したことのある画像や起動後に表示したことのある画像のパスを指定した場合、 すでに読み込み済みの画像が再利用されます。 style として Immediate を指定した場合、 duration の値は無視され、ただちに画像が切り替わります。 これは Show(string) と同じ動作です。 ShowDefaultSprites() SetupDefaultSprites(string, string, string, string) でセットアップした立ち絵を直ちに表示します。 メソッドの詳細は ShowDefaultSprites(Sprite2DTransitionStyle, float) を参照して下さい。 void ShowDefaultSprites() ShowDefaultSprites(Sprite2DTransitionStyle, float) SetupDefaultSprites(string, string, string, string) でセットアップしたデフォルトの立ち絵を表示します。 void ShowDefaultSprites(Sprite2DTransitionStyle style, float duration) Parameters style Sprite2DTransitionStyle 画像切り替えのスタイル。指定しない場合、ただちに画像が切り替わります。 duration float 画像切り替え動作を実行する秒数。0以下の値を指定した場合、ただちに画像が切り替わります。 Remarks この関数を呼び出す場合、あらかじめ SetupDefaultSprites(string, string, string, string) でセットアップを行う必要があります。 事前に SetupDefaultSprites(string, string, string, string) を呼び出していなかった場合、このメソッドを呼び出しても何も起こりません。 ShowPreset(string) プリセット画像の名称を指定して画像を表示します。 void ShowPreset(string name) Parameters name string プリセット画像の名称 Remarks プリセット画像とは、アプリケーション自体に組み込まれていてサブキャラとして利用可能な画像のことです。 name に指定可能な値の詳細や、画像切り替え時の演出を調整する場合の呼び出しについては ShowPreset(string, Sprite2DTransitionStyle, float) を参照して下さい。 ShowPreset(string, Sprite2DTransitionStyle, float) プリセット画像の名称、および切り替え演出を指定して画像を表示します。 void ShowPreset(string name, Sprite2DTransitionStyle style, float duration) Parameters name string プリセット画像の名称 style Sprite2DTransitionStyle 画像切り替えのスタイル duration float 画像切り替え動作を実行する秒数。0以下の値を指定した場合、ただちに画像が切り替わります。 Remarks プリセット画像とは、アプリケーション自体に組み込まれていてサブキャラとして利用可能な画像のことです。 v4.0.0では name として以下の値を指定できます。 \"A_default\" \"A_blink\" \"A_mouthOpen\" \"A_blink_mouthOpen\" \"A_happy\" \"A_angry\" \"A_sad\" \"A_relaxed\" \"A_surprised\" \"A_wink\" \"A_smug_face\" この関数はサブキャラの表情を切り替える場合などに適しています。 その他の用途については Show(string, Sprite2DTransitionStyle, float) を参照して下さい。"
  },
  "api/VMagicMirror.Buddy.ISprite3D.html": {
    "href": "api/VMagicMirror.Buddy.ISprite3D.html",
    "title": "Interface ISprite3D | VMagicMirror Buddy",
    "summary": "Interface ISprite3D Namespace VMagicMirror.Buddy 画像を3D空間上のスプライトとして表示するAPIです。 public interface ISprite3D Remarks このAPIでは .jpg または .png ファイル、およびプリセットとしてアプリケーションに組み込まれた画像をロードできます。 画像は長いほうの辺を1mにするようなスケールでロードされます。 このスケールは GetTransform3D(string) または Transform で得られるTransformのスケールを通じて調整できます。 直感的なサイズ調整のために、スプライトとしては正方形の画像を用意することを推奨しています。 また、サブキャラに表情差分などの画像群がある場合、原則として各画像のサイズを揃えるようにしてください。 Properties Transform オブジェクトの基本姿勢に関する値を取得します。 ITransform3D Transform { get; } Property Value ITransform3D Methods Hide() スプライトを非表示にします。 void Hide() Preload(string) ファイルパスを指定して、該当パスの画像を事前にロードします。 void Preload(string path) Parameters path string 画像ファイルのパス Remarks この関数を事前に呼ぶことは必須ではありませんが、起動時に呼び出しておくことにより、スプライトの切り替え時に時間がかかるのを防ぐことができます。 Show(string) ファイルパスを指定して、該当パスの画像をスプライトとしてロードします。 void Show(string path) Parameters path string Remarks サブキャラが起動中に同一ファイルパスの画像を複数回指定すると、すでにロード済みの画像が再利用されます。 ShowPreset(string) プリセット画像の名称を指定して画像を表示します。 void ShowPreset(string name) Parameters name string プリセット画像の名称 Remarks プリセット画像とは、アプリケーション自体に組み込まれていてサブキャラとして利用可能な画像のことです。 name に指定可能な値については ShowPreset(string, Sprite2DTransitionStyle, float) を参照して下さい。"
  },
  "api/VMagicMirror.Buddy.ISpriteEffect.html": {
    "href": "api/VMagicMirror.Buddy.ISpriteEffect.html",
    "title": "Interface ISpriteEffect | VMagicMirror Buddy",
    "summary": "Interface ISpriteEffect Namespace VMagicMirror.Buddy スプライトを移動・回転・変形できるようなエフェクトを提供するAPIです。 public interface ISpriteEffect Remarks いずれのエフェクトもデフォルトでは無効になっています。 IsActive などで IsActive プロパティを有効にするか、 またはJump(float, float, int) のように動作を開始させるメソッドを呼び出すことでエフェクトを適用します。 一部のエフェクト設定値には値の範囲、下限、上限が定められています。 これらの値については、範囲を超えた値は丸めて適用されます。 Properties Floating 浮遊しているような視覚効果を適用するエフェクトの設定を取得します。 IFloatingSpriteEffect Floating { get; } Property Value IFloatingSpriteEffect Jump ジャンプ動作を適用するエフェクトの設定を取得します。 IJumpSpriteEffect Jump { get; } Property Value IJumpSpriteEffect Puni ぷにぷにするような視覚効果を適用するエフェクトの設定を取得します。 IPuniSpriteEffect Puni { get; } Property Value IPuniSpriteEffect Vibrate 小刻みに振動するような視覚効果を適用するエフェクトの設定を取得します。 IVibrateSpriteEffect Vibrate { get; } Property Value IVibrateSpriteEffect"
  },
  "api/VMagicMirror.Buddy.ITransform2D.html": {
    "href": "api/VMagicMirror.Buddy.ITransform2D.html",
    "title": "Interface ITransform2D | VMagicMirror Buddy",
    "summary": "Interface ITransform2D Namespace VMagicMirror.Buddy 画面の最前面に表示されたオブジェクトについて、2D空間上の姿勢が取得、設定できるインスタンスです。 public interface ITransform2D Properties LocalPosition Transformの位置をローカル座標の値として取得、設定します。 Vector2 LocalPosition { get; set; } Property Value Vector2 LocalRotation Transformの回転をローカル座標の値として取得、設定します。 Quaternion LocalRotation { get; set; } Property Value Quaternion LocalScale Transformのスケールをローカル座標の値として取得、設定します。 Vector2 LocalScale { get; set; } Property Value Vector2 Pivot スプライトを回転および拡大/縮小するときの中心になる位置を、[0, 1]の範囲を示す座標で指定します。 初期値は (0.5, 0.0) です。 Vector2 Pivot { get; set; } Property Value Vector2 Position Transformの位置を画面座標で取得、設定します。 Vector2 Position { get; set; } Property Value Vector2 Rotation Transformの回転を画面座標で取得、設定します。 Quaternion Rotation { get; set; } Property Value Quaternion Methods AsReadOnly() インスタンスを読み取り専用とみなした値に変換します。 IReadOnlyTransform2D AsReadOnly() Returns IReadOnlyTransform2D 読み取り専用扱いに変換した値 Remarks このメソッドの戻り値を経由するとTransformの状態は編集できなくなります。 ただし、呼び出し元のインスタンス自体は引き続き編集可能です。 RemoveParent() 親オブジェクトを外します。 void RemoveParent() Remarks この関数の呼び出し前後では LocalPosition や LocalRotation は変化しませんが、 Position や Rotation は変化します。 画面上での位置を保ったまま親オブジェクトを指定したい場合、あらかじめ Position や Rotation の値をキャッシュしておき、 この関数の呼び出し後に適用します。 SetParent(IReadOnlyTransform2D) 親オブジェクトを設定します。 void SetParent(IReadOnlyTransform2D parent) Parameters parent IReadOnlyTransform2D 親要素となるオブジェクト Remarks この関数を呼び出すと、最終的なTransformの姿勢は親オブジェクトの姿勢やスケールの影響を受けるようになります。 設定した親オブジェクトを解除する場合、RemoveParent() を呼び出します。 この関数の呼び出し前後では LocalPosition や LocalRotation は変化しませんが、 Position や Rotation は変化します。 画面上での位置を保ったまま親オブジェクトを指定したい場合、あらかじめ Position や Rotation の値をキャッシュしておき、 この関数の呼び出し後に適用します。 SetParent(ITransform2D) 親オブジェクトを設定します。 void SetParent(ITransform2D parent) Parameters parent ITransform2D 親要素となるオブジェクト Remarks この関数を呼び出すと、最終的なTransformの姿勢は親オブジェクトの姿勢やスケールの影響を受けるようになります。 設定した親オブジェクトを解除する場合、RemoveParent() を呼び出します。 この関数の呼び出し前後では LocalPosition や LocalRotation は変化しませんが、 Position や Rotation は変化します。 画面上での位置を保ったまま親オブジェクトを指定したい場合、あらかじめ Position や Rotation の値をキャッシュしておき、 この関数の呼び出し後に適用します。"
  },
  "api/VMagicMirror.Buddy.ITransform3D.html": {
    "href": "api/VMagicMirror.Buddy.ITransform3D.html",
    "title": "Interface ITransform3D | VMagicMirror Buddy",
    "summary": "Interface ITransform3D Namespace VMagicMirror.Buddy 姿勢を取得・編集できるような3DオブジェクトのTransform情報です。 public interface ITransform3D Properties LocalPosition オブジェクトのローカル座標での位置を取得、設定します。 Vector3 LocalPosition { get; set; } Property Value Vector3 Remarks SetParent(IReadOnlyTransform3D) などで親オブジェクトを指定している場合、この値は親オブジェクトに対するローカル姿勢を表します。 そうでない場合、この値はワールド座標に相当する値になります。 LocalRotation オブジェクトのローカル座標での回転を取得、設定します。 Quaternion LocalRotation { get; set; } Property Value Quaternion Remarks SetParent(IReadOnlyTransform3D) などで親オブジェクトを指定している場合、この値は親オブジェクトに対するローカル姿勢を表します。 そうでない場合、この値はワールド座標に相当する値になります。 LocalScale オブジェクトのローカル座標でのスケールを取得、設定します。 Vector3 LocalScale { get; set; } Property Value Vector3 Remarks SetParent(IReadOnlyTransform3D) などで親オブジェクトを指定している場合、この値は親オブジェクトのスケールと組み合わせて適用されます。 そうでない場合、この値そのものでオブジェクトのスケールが定まります。 Position オブジェクトの位置をワールド座標で取得、設定します。 Vector3 Position { get; set; } Property Value Vector3 Rotation オブジェクトの回転をワールド座標で取得、設定します。 Quaternion Rotation { get; set; } Property Value Quaternion Methods AsReadOnly() インスタンスを読み取り専用とみなした値に変換します。 IReadOnlyTransform3D AsReadOnly() Returns IReadOnlyTransform3D 読み取り専用扱いに変換した値 Remarks このメソッドの戻り値を経由するとTransformの状態は編集できなくなります。 ただし、呼び出し元のインスタンス自体は引き続き編集可能です。 RemoveParent() 親オブジェクトを削除し、オブジェクトをワールド空間に直接配置した状態にします。 void RemoveParent() SetParent(HumanBodyBones) 親オブジェクトとして、メインアバターの特定のボーンを指定します。 void SetParent(HumanBodyBones bone) Parameters bone HumanBodyBones 親オブジェクトとして用いるアバターのボーン Remarks NoneやLastBoneを指定した場合、親オブジェクトを外す処理として扱われます。 この関数はメインアバターがロードされていない状態でも呼び出せます。 メインアバターがロードされた時点で、指定したアバターのボーンが親オブジェクトに切り替わります。 SetParent(IReadOnlyTransform3D) 親オブジェクトを指定します。 void SetParent(IReadOnlyTransform3D parent) Parameters parent IReadOnlyTransform3D 親オブジェクト Remarks 親オブジェクトを指定すると、このTransformが関連するオブジェクトの姿勢や大きさは親オブジェクトの影響を受けるようになります。 SetParent(ITransform3D) 親オブジェクトを指定します。 void SetParent(ITransform3D parent) Parameters parent ITransform3D 親オブジェクト Remarks 親オブジェクトを指定すると、このTransformが関連するオブジェクトの姿勢や大きさは親オブジェクトの影響を受けるようになります。"
  },
  "api/VMagicMirror.Buddy.IVibrateSpriteEffect.html": {
    "href": "api/VMagicMirror.Buddy.IVibrateSpriteEffect.html",
    "title": "Interface IVibrateSpriteEffect | VMagicMirror Buddy",
    "summary": "Interface IVibrateSpriteEffect Namespace VMagicMirror.Buddy x軸とy軸の各方向に振動するような視覚効果を適用するエフェクトの設定です。 public interface IVibrateSpriteEffect Properties FrequencyX 横方向の揺れの周波数を取得、設定します。デフォルト値は 20 です。 float FrequencyX { get; set; } Property Value float FrequencyY 縦方向の揺れの周波数を取得、設定します。デフォルト値は 20 です。 float FrequencyY { get; set; } Property Value float IntensityX 横方向の揺れ幅を取得、設定します。デフォルト値は 0 です。 float IntensityX { get; set; } Property Value float IntensityY 縦方向の揺れ幅を取得、設定します。デフォルト値は 0 です。 float IntensityY { get; set; } Property Value float IsActive エフェクトを動作させるかどうかを取得、設定します。true を設定することでエフェクトが動作します。 bool IsActive { get; set; } Property Value bool PhaseOffsetX 横方向の振動の位相オフセットを [0, 1] の範囲で取得、設定します。デフォルト値は 0 です。 float PhaseOffsetX { get; set; } Property Value float Remarks x軸とy軸で振動のタイミングをずらしたいとき、このプロパティに値を指定します。 PhaseOffsetY 縦方向の振動の位相オフセットを [0, 1] の範囲で取得、設定します。デフォルト値は 0 です。 float PhaseOffsetY { get; set; } Property Value float Remarks x軸とy軸で振動のタイミングをずらしたいとき、このプロパティに値を指定します。"
  },
  "api/VMagicMirror.Buddy.IVrm.html": {
    "href": "api/VMagicMirror.Buddy.IVrm.html",
    "title": "Interface IVrm | VMagicMirror Buddy",
    "summary": "Interface IVrm Namespace VMagicMirror.Buddy サブキャラとしてVRMのロードと操作を行うAPIです。 本APIは作成途上のものであり、VMagicMirror v4.0.0の時点では本APIは利用できません。 public interface IVrm Remarks 本APIはVRMのロードと操作を行うためのAPIです。 VMagicMirror v4.0.0の時点では機能整備が完了していないため、本APIの利用手段は提供していません。 ここでは、想定している機能を提示する目的でドキュメントを公開しています。 VRMやGLBによる3Dオブジェクトをサブキャラとして表示する機能は、 v4.0.0 以降のマイナーアップデートとして提供予定です。 Properties Transform オブジェクトの基本姿勢に関する値を取得します。 ITransform3D Transform { get; } Property Value ITransform3D Methods GetBlendShape(string, bool) ロードしたモデルについて、ブレンドシェイプの現在値を取得します。 float GetBlendShape(string name, bool customClip) Parameters name string customClip bool VRM1.0の標準ブレンドシェイプの値を取得する場合は false、カスタムのブレンドシェイプの値を取得する場合は true Returns float 現在適用されているブレンドシェイプの値 Remarks 指定したブレンドシェイプがモデルに存在しない場合、この関数は 0 を返します。 GetCustomBlendShapeNames() モデルに定義されたカスタムブレンドシェイプの名称の一覧を取得します。 string[] GetCustomBlendShapeNames() Returns string[] HasBlendShape(string) ロードしたモデルに指定した名称のカスタムブレンドシェイプが存在するかどうかを取得します。 bool HasBlendShape(string name) Parameters name string カスタムブレンドシェイプの名称 Returns bool 指定した名称のカスタムブレンドシェイプが存在すれば true、そうでなければfalse Hide() モデルを非表示にします。 void Hide() LoadAsync(string) ファイルパスを指定してVRMをロードします。 Task LoadAsync(string path) Parameters path string VRMのファイルパス Returns Task LoadPresetAsync(string) 名称を指定してプリセットVRMをロードします。 Task LoadPresetAsync(string name) Parameters name string Returns Task Remarks プリセットVRMとは、アプリケーション本体に組み込まれたVRMのことです。 このメソッドでVRMをロードする場合、事前にVRMを用意する必要はありません。 v4.0.0では name に指定できる値は \"A\" のみです。 これ以外の名称を指定した場合、 LoadAsync(string) で存在しないファイルを指定した場合と同様のエラーになります。 RunVrma(IVrmAnimation, bool, bool) VRM Animationを再生します。 void RunVrma(IVrmAnimation animation, bool loop, bool immediate) Parameters animation IVrmAnimation 対象になるVRM Animation loop bool VRM Animationをループ実行したい場合は true、そうでなければfalse immediate bool 補間を行わずにただちに指定したアニメーションを再生する場合は true、現在のポーズとの補間を行う場合は false Remarks v4.0.0の時点では immediate オプションの値によらず、補間を行わない動作が適用されます。 このフラグは将来のバージョンで参照されるようになります。 バージョンアップによる挙動変更を避けたい場合、 immediate の値としては true を指定してください。 SetBlendShape(string, bool, float) ロードしたモデルについて、ブレンドシェイプの値を適用します。 void SetBlendShape(string name, bool customClip, float value) Parameters name string ブレンドシェイプの名称 customClip bool VRM1.0の標準ブレンドシェイプに値を適用する場合は false、カスタムのブレンドシェイプに適用する場合は true value float 適用するブレンドシェイプの値。 [0, 1] の範囲で指定します Remarks 指定したブレンドシェイプがモデルに存在しない場合、この関数を呼んでも何も起こりません。 SetBoneRotation(HumanBodyBones, Quaternion) ボーンのローカル回転を設定します。 void SetBoneRotation(HumanBodyBones bone, Quaternion localRotation) Parameters bone HumanBodyBones 回転を設定するボーン localRotation Quaternion ボーンのローカル回転 Remarks 指定したボーンが任意ボーンであり、そのボーンが存在しない場合、この関数を呼び出しても何も起こりません。 SetBoneRotations(IReadOnlyDictionary<HumanBodyBones, Quaternion>) ロードしたモデルについて、ボーンのローカル回転を一括で適用します。 void SetBoneRotations(IReadOnlyDictionary<HumanBodyBones, Quaternion> localRotations) Parameters localRotations IReadOnlyDictionary<HumanBodyBones, Quaternion> 回転を適用したいボーンをキー、ローカル回転を値としたディクショナリ Remarks ボーン回転を更新したくないボーンについては、キーを含めないようにします。 任意ボーンについて、モデルに該当するボーンが存在しない場合、その値は無視されます。 SetHipsLocalPosition(Vector3) ロードしたモデルについて、Hipsボーンの位置をローカル座標扱いで指定してモデルの現在位置を更新します。 void SetHipsLocalPosition(Vector3 position) Parameters position Vector3 Hipsボーンの位置 Remarks SetParent(IReadOnlyTransform3D) などで親オブジェクトを指定している場合、 position は親要素に対するローカルな位置として扱われます。 そうでない場合、position はワールド座標の位置として扱われます。 SetHipsPosition(Vector3) ロードしたモデルについて、Hipsボーンの位置をワールド座標扱いで指定してモデルの現在位置を更新します。 void SetHipsPosition(Vector3 position) Parameters position Vector3 Hipsボーンの位置 SetMuscles(float?[]) ロードしたモデルについて、モデルの姿勢をMuscle値ベースで適用します。 void SetMuscles(float?[] muscles) Parameters muscles float?[] Muscle値の一覧 Remarks この関数はUnityのHumanoidの仕様を十分理解している場合に、効率的に姿勢を適用する目的で使用します。 muscles は長さが 95 の配列であるのが期待値です。 muscleの一部のみを更新する場合、更新したいmuscleの値のみを有効な値とし、それ以外は null にします。 Show() LoadAsync(string) でロードしたモデルを表示します。 void Show() StopVrma(bool) RunVrma(IVrmAnimation, bool, bool) で再生したVRM Animationを停止します。 void StopVrma(bool immediate) Parameters immediate bool 補間を行わずにただちに停止させる場合は true、現在のポーズとの補間を行いながら停止させる場合は false Remarks VRM Animationを再生していない状態でこの関数を呼び出した場合、何も起こりません。 v4.0.0の時点では immediate オプションの値によらず、補間を行わない動作が適用されます。 このフラグは将来のバージョンで参照されるようになります。 バージョンアップによる挙動変更を避けたい場合、 immediate の値としては true を指定してください。"
  },
  "api/VMagicMirror.Buddy.IVrmAnimation.html": {
    "href": "api/VMagicMirror.Buddy.IVrmAnimation.html",
    "title": "Interface IVrmAnimation | VMagicMirror Buddy",
    "summary": "Interface IVrmAnimation Namespace VMagicMirror.Buddy VRM Animationの読み込み処理に関するAPIです。 本APIは作成途上のものであり、VMagicMirror v4.0.0の時点では本APIは利用できません。 public interface IVrmAnimation Remarks VMagicMirror v4.0.0の時点では機能整備が完了していないため、本APIの利用手段は提供していません。 ここでは、想定している機能を提示する目的でドキュメントを公開しています。 VRMやGLBによる3Dオブジェクトをサブキャラとして表示する機能は、 v4.0.0 以降のマイナーアップデートとして提供予定です。 Properties IsLoaded LoadAsync(string) によるロード処理が終わっていれば true、そうでなければ false を返します。 bool IsLoaded { get; } Property Value bool Methods GetLength() IsLoaded が true の場合、読み込んだアニメーションの長さを秒単位で取得します。 読み込みが完了していない場合は -1 を返します。 float GetLength() Returns float VRM Animationの再生時間の秒数 LoadAsync(string) ファイルパスを指定してVRM Animationをロードします。 Task LoadAsync(string path) Parameters path string VRM Animation (.vrma) のファイルパス Returns Task"
  },
  "api/VMagicMirror.Buddy.PerfectSyncBlendShapeNames.html": {
    "href": "api/VMagicMirror.Buddy.PerfectSyncBlendShapeNames.html",
    "title": "Class PerfectSyncBlendShapeNames | VMagicMirror Buddy",
    "summary": "Class PerfectSyncBlendShapeNames Namespace VMagicMirror.Buddy パーフェクトシンク機能で参照するアバターのブレンドシェイプ名です。 public static class PerfectSyncBlendShapeNames Inheritance object PerfectSyncBlendShapeNames Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks 個別のブレンドシェイプの動作についてはこのドキュメントでは詳解しません。 詳しくはパーフェクトシンクに関連したウェブ上の情報や、ARKitのARFaceAnchor.BlendShapeLocationのドキュメントなどを参照して下さい。 Properties BrowDownLeft public static string BrowDownLeft { get; } Property Value string BrowDownRight public static string BrowDownRight { get; } Property Value string BrowInnerUp public static string BrowInnerUp { get; } Property Value string BrowOuterUpLeft public static string BrowOuterUpLeft { get; } Property Value string BrowOuterUpRight public static string BrowOuterUpRight { get; } Property Value string CheekPuff public static string CheekPuff { get; } Property Value string CheekSquintLeft public static string CheekSquintLeft { get; } Property Value string CheekSquintRight public static string CheekSquintRight { get; } Property Value string EyeBlinkLeft public static string EyeBlinkLeft { get; } Property Value string EyeBlinkRight public static string EyeBlinkRight { get; } Property Value string EyeLookDownLeft public static string EyeLookDownLeft { get; } Property Value string EyeLookDownRight public static string EyeLookDownRight { get; } Property Value string EyeLookInLeft public static string EyeLookInLeft { get; } Property Value string EyeLookInRight public static string EyeLookInRight { get; } Property Value string EyeLookOutLeft public static string EyeLookOutLeft { get; } Property Value string EyeLookOutRight public static string EyeLookOutRight { get; } Property Value string EyeLookUpLeft public static string EyeLookUpLeft { get; } Property Value string EyeLookUpRight public static string EyeLookUpRight { get; } Property Value string EyeSquintLeft public static string EyeSquintLeft { get; } Property Value string EyeSquintRight public static string EyeSquintRight { get; } Property Value string EyeWideLeft public static string EyeWideLeft { get; } Property Value string EyeWideRight public static string EyeWideRight { get; } Property Value string JawForward public static string JawForward { get; } Property Value string JawLeft public static string JawLeft { get; } Property Value string JawOpen public static string JawOpen { get; } Property Value string JawRight public static string JawRight { get; } Property Value string MouthClose public static string MouthClose { get; } Property Value string MouthDimpleLeft public static string MouthDimpleLeft { get; } Property Value string MouthDimpleRight public static string MouthDimpleRight { get; } Property Value string MouthFrownLeft public static string MouthFrownLeft { get; } Property Value string MouthFrownRight public static string MouthFrownRight { get; } Property Value string MouthFunnel public static string MouthFunnel { get; } Property Value string MouthLeft public static string MouthLeft { get; } Property Value string MouthLowerDownLeft public static string MouthLowerDownLeft { get; } Property Value string MouthLowerDownRight public static string MouthLowerDownRight { get; } Property Value string MouthPressLeft public static string MouthPressLeft { get; } Property Value string MouthPressRight public static string MouthPressRight { get; } Property Value string MouthPucker public static string MouthPucker { get; } Property Value string MouthRight public static string MouthRight { get; } Property Value string MouthRollLower public static string MouthRollLower { get; } Property Value string MouthRollUpper public static string MouthRollUpper { get; } Property Value string MouthShrugLower public static string MouthShrugLower { get; } Property Value string MouthShrugUpper public static string MouthShrugUpper { get; } Property Value string MouthSmileLeft public static string MouthSmileLeft { get; } Property Value string MouthSmileRight public static string MouthSmileRight { get; } Property Value string MouthStretchLeft public static string MouthStretchLeft { get; } Property Value string MouthStretchRight public static string MouthStretchRight { get; } Property Value string MouthUpperUpLeft public static string MouthUpperUpLeft { get; } Property Value string MouthUpperUpRight public static string MouthUpperUpRight { get; } Property Value string NoseSneerLeft public static string NoseSneerLeft { get; } Property Value string NoseSneerRight public static string NoseSneerRight { get; } Property Value string TongueOut public static string TongueOut { get; } Property Value string See Also ARFaceAnchor.BlendShapeLocation"
  },
  "api/VMagicMirror.Buddy.Pose.html": {
    "href": "api/VMagicMirror.Buddy.Pose.html",
    "title": "Struct Pose | VMagicMirror Buddy",
    "summary": "Struct Pose Namespace VMagicMirror.Buddy 位置と回転のペアを表すデータです。 public struct Pose Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks UnityEngineのPose型に類似していますが、データ定義以外の機能はとくに含んでいません。 Constructors Pose(Vector3, Quaternion) 位置と回転を指定してインスタンスを初期化します。 public Pose(Vector3 position, Quaternion rotation) Parameters position Vector3 位置 rotation Quaternion 回転 Fields position 位置を取得、設定します。 public Vector3 position Field Value Vector3 rotation 回転を取得、設定します。 public Quaternion rotation Field Value Quaternion Properties identity 位置が zero、かつ回転が identity であるような値を取得します。 public static Pose identity { get; } Property Value Pose"
  },
  "api/VMagicMirror.Buddy.Quaternion.html": {
    "href": "api/VMagicMirror.Buddy.Quaternion.html",
    "title": "Struct Quaternion | VMagicMirror Buddy",
    "summary": "Struct Quaternion Namespace VMagicMirror.Buddy UnityEngineのQuaternionとほぼ同等のことが出来る四元数のデータです。 回転を表すことを目的として定義されています。 public struct Quaternion : IEquatable<Quaternion> Implements IEquatable<Quaternion> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Quaternion(float, float, float, float) 各成分の値を指定してインスタンスを初期化します。 public Quaternion(float x, float y, float z, float w) Parameters x float y float z float w float Fields w w成分を取得、設定します。 public float w Field Value float x x成分を取得、設定します。 public float x Field Value float y y成分を取得、設定します。 public float y Field Value float z z成分を取得、設定します。 public float z Field Value float Properties eulerAngles オイラー角として回転を取得、設定します。 public Vector3 eulerAngles { get; set; } Property Value Vector3 Remarks 回転の適用順はUnityEngine.Quaternionに準じており、YXZの順に適用されます。 identity 回転を行わないことを表す値を取得します。 public static Quaternion identity { get; } Property Value Quaternion normalized 大きさを正規化した値を取得します。 public Quaternion normalized { get; } Property Value Quaternion Methods Angle(Quaternion, Quaternion) 指定した回転どうしのなす角度を取得します。 public static float Angle(Quaternion a, Quaternion b) Parameters a Quaternion b Quaternion Returns float 指定した回転どうしのなす角度 AngleAxis(float, Vector3) 度数法で表した回転角および回転軸ベクトルを指定することで、回転を表す値を生成します。 public static Quaternion AngleAxis(float angle, Vector3 axis) Parameters angle float 度数法で表した回転角 axis Vector3 回転軸ベクトル Returns Quaternion 指定した角度および軸に基づいた回転 Dot(Quaternion, Quaternion) Quaternionをベクトルとして見たときの内積を計算します。 public static float Dot(Quaternion a, Quaternion b) Parameters a Quaternion b Quaternion Returns float 内積の値 Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object other) Parameters other object Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Equals(Quaternion) Indicates whether the current object is equal to another object of the same type. public bool Equals(Quaternion other) Parameters other Quaternion An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Euler(float, float, float) オイラー角を指定して回転を生成します。 public static Quaternion Euler(float x, float y, float z) Parameters x float x軸まわりの回転角を度数法で表した値 y float y軸まわりの回転角を度数法で表した値 z float z軸まわりの回転角を度数法で表した値 Returns Quaternion 指定したオイラー角に基づく回転 Remarks 回転の適用順はUnityEngine.Quaternionに準じており、YXZの順に適用されます。 Euler(Vector3) オイラー角を指定して回転を生成します。 public static Quaternion Euler(Vector3 euler) Parameters euler Vector3 xyzの各軸まわりの回転角を度数法で表した値 Returns Quaternion 指定したオイラー角に基づく回転 Remarks 回転の適用順はUnityEngine.Quaternionに準じており、YXZの順に適用されます。 FromToRotation(Vector3, Vector3) ある方向から別の方向に向くような回転を取得します。 public static Quaternion FromToRotation(Vector3 fromDirection, Vector3 toDirection) Parameters fromDirection Vector3 toDirection Vector3 Returns Quaternion fromDirectionからtoDirectionに向くような回転 GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Inverse(Quaternion) 指定した回転の逆回転を取得します。 public static Quaternion Inverse(Quaternion rotation) Parameters rotation Quaternion 計算元となる回転 Returns Quaternion 逆回転として計算された回転 LookRotation(Vector3) ワールド座標上で指定した方向を向くような回転を生成します。 public static Quaternion LookRotation(Vector3 forward) Parameters forward Vector3 正面を表すワールド座標上の方向 Returns Quaternion 指定した方向を向くような回転 Remarks この関数では、視点の上方向はupであるものとして計算が行われます。 LookRotation(Vector3, Vector3) ワールド座標上で指定した方向を向き、かつローカル座標上で上方向が指定した向きになるような回転を生成します。 public static Quaternion LookRotation(Vector3 forward, Vector3 upwards) Parameters forward Vector3 正面を表すワールド座標上の方向 upwards Vector3 カメラの上方向を表すようなワールド座標上の方向 Returns Quaternion 指定した方向を向くような回転 Remarks upwardsは省略可能であり、省略した場合はupが指定されたものとして扱われます。 Set(float, float, float, float) 成分の値を指定してインスタンスを更新します。 public void Set(float newX, float newY, float newZ, float newW) Parameters newX float newY float newZ float newW float Slerp(Quaternion, Quaternion, float) 2つの回転を球面補間した値を取得します。 public static Quaternion Slerp(Quaternion a, Quaternion b, float t) Parameters a Quaternion tが0のときに適用される回転 b Quaternion tが1のときに適用される回転 t float 補間の適用率を表す値。0であれば結果がaとなり、1であれば結果はbに一致します。 Returns Quaternion 補間された回転 Remarks tの値は0以上1以下に丸めて適用されます。 SlerpUnclamped(Quaternion, Quaternion, float) 2つの回転を球面補間した値を取得します。 Slerp(Quaternion, Quaternion, float)と異なり、tの値は [0, 1] の範囲に丸められません。 public static Quaternion SlerpUnclamped(Quaternion a, Quaternion b, float t) Parameters a Quaternion tが0のときに適用される回転 b Quaternion tが1のときに適用される回転 t float 補間の適用率を表す値。0であれば結果がaとなり、1であれば結果はbに一致します。 Returns Quaternion 補間された回転 ToAngleAxis(out float, out Vector3) 回転をdegreeで表した角度と回転軸に分解した値を取得します。 public void ToAngleAxis(out float angle, out Vector3 axis) Parameters angle float 度数法で表した回転角度 axis Vector3 回転軸の単位ベクトル ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator ==(Quaternion, Quaternion) 2つの回転がほぼ等しければ true 、そうでなければ false を返します。 public static bool operator ==(Quaternion lhs, Quaternion rhs) Parameters lhs Quaternion rhs Quaternion Returns bool operator !=(Quaternion, Quaternion) 2つの回転が異なれば true、ほぼ等しければ false を返します。 public static bool operator !=(Quaternion lhs, Quaternion rhs) Parameters lhs Quaternion rhs Quaternion Returns bool operator *(Quaternion, Quaternion) 回転を合成します。 public static Quaternion operator *(Quaternion lhs, Quaternion rhs) Parameters lhs Quaternion rhs Quaternion Returns Quaternion 合成した回転 operator *(Quaternion, Vector3) 回転をベクトルに適用します。 public static Vector3 operator *(Quaternion rotation, Vector3 point) Parameters rotation Quaternion ベクトルに適用したい回転 point Vector3 回転させる対象となるベクトル Returns Vector3 回転を適用した状態のベクトル"
  },
  "api/VMagicMirror.Buddy.Sprite2DTransitionStyle.html": {
    "href": "api/VMagicMirror.Buddy.Sprite2DTransitionStyle.html",
    "title": "Enum Sprite2DTransitionStyle | VMagicMirror Buddy",
    "summary": "Enum Sprite2DTransitionStyle Namespace VMagicMirror.Buddy Show(string) でスプライト画像を切り替えるプリセット演出の種類です。 public enum Sprite2DTransitionStyle Fields None = 0 画像の切り替えを行わないことを表します。通常は使用しません。 Immediate = 1 ただちにスプライト画像を切り替えます。 LeftFlip = 2 左方向に画像を回転させながらスプライト画像を切り替えます。 RightFlip = 3 右方向に画像を回転させながらスプライト画像を切り替えます。 BottomFlip = 4 画像の底を軸にして画像を奥に倒し、スプライト画像を切り替えてから立ち上がらせます。"
  },
  "api/VMagicMirror.Buddy.Vector2.html": {
    "href": "api/VMagicMirror.Buddy.Vector2.html",
    "title": "Struct Vector2 | VMagicMirror Buddy",
    "summary": "Struct Vector2 Namespace VMagicMirror.Buddy UnityEngineのVector2とほぼ同等のことが出来るようなデータです。 public struct Vector2 : IEquatable<Vector2> Implements IEquatable<Vector2> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Vector2(float, float) public Vector2(float x, float y) Parameters x float y float Fields x public float x Field Value float y public float y Field Value float Properties down public static Vector2 down { get; } Property Value Vector2 left public static Vector2 left { get; } Property Value Vector2 magnitude public float magnitude { get; } Property Value float normalized public Vector2 normalized { get; } Property Value Vector2 one public static Vector2 one { get; } Property Value Vector2 right public static Vector2 right { get; } Property Value Vector2 sqrMagnitude public float sqrMagnitude { get; } Property Value float up public static Vector2 up { get; } Property Value Vector2 zero public static Vector2 zero { get; } Property Value Vector2 Methods Distance(Vector2, Vector2) public static float Distance(Vector2 a, Vector2 b) Parameters a Vector2 b Vector2 Returns float Dot(Vector2, Vector2) public static float Dot(Vector2 lhs, Vector2 rhs) Parameters lhs Vector2 rhs Vector2 Returns float Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object other) Parameters other object Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Equals(Vector2) Indicates whether the current object is equal to another object of the same type. public bool Equals(Vector2 other) Parameters other Vector2 An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Lerp(Vector2, Vector2, float) public static Vector2 Lerp(Vector2 a, Vector2 b, float t) Parameters a Vector2 b Vector2 t float Returns Vector2 LerpUnclamped(Vector2, Vector2, float) public static Vector2 LerpUnclamped(Vector2 a, Vector2 b, float t) Parameters a Vector2 b Vector2 t float Returns Vector2 Normalize() public void Normalize() Scale(Vector2) public void Scale(Vector2 scale) Parameters scale Vector2 Scale(Vector2, Vector2) public static Vector2 Scale(Vector2 a, Vector2 b) Parameters a Vector2 b Vector2 Returns Vector2 Set(float, float) public void Set(float newX, float newY) Parameters newX float newY float SqrMagnitude() public float SqrMagnitude() Returns float SqrMagnitude(Vector2) public static float SqrMagnitude(Vector2 a) Parameters a Vector2 Returns float ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator +(Vector2, Vector2) public static Vector2 operator +(Vector2 a, Vector2 b) Parameters a Vector2 b Vector2 Returns Vector2 operator /(Vector2, float) public static Vector2 operator /(Vector2 a, float d) Parameters a Vector2 d float Returns Vector2 operator /(Vector2, Vector2) public static Vector2 operator /(Vector2 a, Vector2 b) Parameters a Vector2 b Vector2 Returns Vector2 operator ==(Vector2, Vector2) public static bool operator ==(Vector2 lhs, Vector2 rhs) Parameters lhs Vector2 rhs Vector2 Returns bool implicit operator Vector3(Vector2) public static implicit operator Vector3(Vector2 v) Parameters v Vector2 Returns Vector3 implicit operator Vector2(Vector3) public static implicit operator Vector2(Vector3 v) Parameters v Vector3 Returns Vector2 operator !=(Vector2, Vector2) public static bool operator !=(Vector2 lhs, Vector2 rhs) Parameters lhs Vector2 rhs Vector2 Returns bool operator *(float, Vector2) public static Vector2 operator *(float d, Vector2 a) Parameters d float a Vector2 Returns Vector2 operator *(Vector2, float) public static Vector2 operator *(Vector2 a, float d) Parameters a Vector2 d float Returns Vector2 operator *(Vector2, Vector2) public static Vector2 operator *(Vector2 a, Vector2 b) Parameters a Vector2 b Vector2 Returns Vector2 operator -(Vector2, Vector2) public static Vector2 operator -(Vector2 a, Vector2 b) Parameters a Vector2 b Vector2 Returns Vector2 operator -(Vector2) public static Vector2 operator -(Vector2 a) Parameters a Vector2 Returns Vector2"
  },
  "api/VMagicMirror.Buddy.Vector3.html": {
    "href": "api/VMagicMirror.Buddy.Vector3.html",
    "title": "Struct Vector3 | VMagicMirror Buddy",
    "summary": "Struct Vector3 Namespace VMagicMirror.Buddy UnityEngineのVector3とほぼ同等のことが出来るようなデータです。 public struct Vector3 : IEquatable<Vector3> Implements IEquatable<Vector3> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Vector3(float, float, float) public Vector3(float x, float y, float z) Parameters x float y float z float Fields x public float x Field Value float y public float y Field Value float z public float z Field Value float Properties back public static Vector3 back { get; } Property Value Vector3 down public static Vector3 down { get; } Property Value Vector3 forward public static Vector3 forward { get; } Property Value Vector3 left public static Vector3 left { get; } Property Value Vector3 magnitude public float magnitude { get; } Property Value float normalized public Vector3 normalized { get; } Property Value Vector3 one public static Vector3 one { get; } Property Value Vector3 right public static Vector3 right { get; } Property Value Vector3 sqrMagnitude public float sqrMagnitude { get; } Property Value float up public static Vector3 up { get; } Property Value Vector3 zero public static Vector3 zero { get; } Property Value Vector3 Methods Cross(Vector3, Vector3) public static Vector3 Cross(Vector3 lhs, Vector3 rhs) Parameters lhs Vector3 rhs Vector3 Returns Vector3 Distance(Vector3, Vector3) public static float Distance(Vector3 a, Vector3 b) Parameters a Vector3 b Vector3 Returns float Dot(Vector3, Vector3) public static float Dot(Vector3 lhs, Vector3 rhs) Parameters lhs Vector3 rhs Vector3 Returns float Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object other) Parameters other object Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Equals(Vector3) Indicates whether the current object is equal to another object of the same type. public bool Equals(Vector3 other) Parameters other Vector3 An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Lerp(Vector3, Vector3, float) public static Vector3 Lerp(Vector3 a, Vector3 b, float t) Parameters a Vector3 b Vector3 t float Returns Vector3 LerpUnclamped(Vector3, Vector3, float) public static Vector3 LerpUnclamped(Vector3 a, Vector3 b, float t) Parameters a Vector3 b Vector3 t float Returns Vector3 Magnitude(Vector3) public static float Magnitude(Vector3 vector) Parameters vector Vector3 Returns float Normalize() public void Normalize() Normalize(Vector3) public static Vector3 Normalize(Vector3 value) Parameters value Vector3 Returns Vector3 Scale(Vector3) public void Scale(Vector3 scale) Parameters scale Vector3 Scale(Vector3, Vector3) public static Vector3 Scale(Vector3 a, Vector3 b) Parameters a Vector3 b Vector3 Returns Vector3 Set(float, float, float) public void Set(float newX, float newY, float newZ) Parameters newX float newY float newZ float SqrMagnitude(Vector3) public static float SqrMagnitude(Vector3 vector) Parameters vector Vector3 Returns float ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators operator +(Vector3, Vector3) public static Vector3 operator +(Vector3 a, Vector3 b) Parameters a Vector3 b Vector3 Returns Vector3 operator /(Vector3, float) public static Vector3 operator /(Vector3 a, float d) Parameters a Vector3 d float Returns Vector3 operator ==(Vector3, Vector3) public static bool operator ==(Vector3 lhs, Vector3 rhs) Parameters lhs Vector3 rhs Vector3 Returns bool operator !=(Vector3, Vector3) public static bool operator !=(Vector3 lhs, Vector3 rhs) Parameters lhs Vector3 rhs Vector3 Returns bool operator *(float, Vector3) public static Vector3 operator *(float d, Vector3 a) Parameters d float a Vector3 Returns Vector3 operator *(Vector3, float) public static Vector3 operator *(Vector3 a, float d) Parameters a Vector3 d float Returns Vector3 operator -(Vector3, Vector3) public static Vector3 operator -(Vector3 a, Vector3 b) Parameters a Vector3 b Vector3 Returns Vector3 operator -(Vector3) public static Vector3 operator -(Vector3 a) Parameters a Vector3 Returns Vector3"
  },
  "api/VMagicMirror.Buddy.html": {
    "href": "api/VMagicMirror.Buddy.html",
    "title": "Namespace VMagicMirror.Buddy | VMagicMirror Buddy",
    "summary": "Namespace VMagicMirror.Buddy Classes BlendShapePresetNames IAvatarFacialなどで適用されることのあるブレンドシェイプ名のうち、 VRM1.0 の標準として定義されるブレンドシェイプの名称を定義したクラスです。 PerfectSyncBlendShapeNames パーフェクトシンク機能で参照するアバターのブレンドシェイプ名です。 Structs AudioStartedInfo AudioStarted イベントに付随する情報です。 AudioStoppedInfo AudioStopped イベントに付随する情報です。 Pose 位置と回転のペアを表すデータです。 Quaternion UnityEngineのQuaternionとほぼ同等のことが出来る四元数のデータです。 回転を表すことを目的として定義されています。 Vector2 UnityEngineのVector2とほぼ同等のことが出来るようなデータです。 Vector3 UnityEngineのVector3とほぼ同等のことが出来るようなデータです。 Interfaces IAudio 音声の再生に関連するAPIです。 IAvatarFacial アバターの表情の状態に関するAPIです。 IAvatarLoadEvent アバターのロード状態に関するAPIです。 IAvatarMotionEvent アバターの動作をイベントとして検出できるAPIです。 IAvatarPose アバターの姿勢情報に関するAPIです。 IDefaultSpritesSetting まばたき、口パクの画像差分を含むスプライト画像で構成されたデフォルト立ち絵を操作するための設定を定義します。 IDeviceLayout アバターがいる空間内のキーボードなどのデバイスや、アバターウィンドウを撮影しているカメラの配置などのレイアウト情報を取得できるAPIです。 IFloatingSpriteEffect 浮遊しているような視覚効果を適用するエフェクトの設定です。 IGlb GLB形式の3Dモデルの読み込みと操作に関するAPIです。 本APIは作成途上のものであり、VMagicMirror v4.0.0の時点では本APIは利用できません。 IInput キーボード、マウス、ゲームパッドなどの入力状態を取得できるAPIです。 IJumpSpriteEffect ジャンプ動作を適用するエフェクトの設定です。 IManifestTransforms manifest.json で定義され、ユーザーがレイアウトを編集可能な2Dまたは3DのTransform情報を取得できるAPIです。 IProperty マニフェストで定義されたプロパティ値を取得できるAPIです。 IPuniSpriteEffect x軸に伸びながらy軸方向に縮む、またその逆を行うような、ぷにぷにする視覚効果を適用するエフェクトの設定です。 IReadOnlyTransform2D 現在の姿勢やアバターの親ボーンのアタッチ先を読み取り可能なTransform情報です。 とくに、マニフェストの定義に基づいて生成され、ユーザーがレイアウトを編集できる2DのTransform情報がこのinterfaceの値として表現されます。 IReadOnlyTransform3D 現在の姿勢やアバターの親ボーンのアタッチ先を読み取り可能なTransform情報です。 とくに、マニフェストの定義に基づいて生成され、ユーザーがレイアウトを編集できる3DのTransform情報がこのinterfaceの値として表現されます。 IRootApi スクリプトから Api 変数としてアクセスできるような、サブキャラの制御に利用できるAPI群です。 IScreen アバターを表示しているウィンドウの状態に関するAPIです。 ISprite2D 画像をアバターウィンドウの最前面に平面的に表示するAPIです。 ISprite3D 画像を3D空間上のスプライトとして表示するAPIです。 ISpriteEffect スプライトを移動・回転・変形できるようなエフェクトを提供するAPIです。 ITransform2D 画面の最前面に表示されたオブジェクトについて、2D空間上の姿勢が取得、設定できるインスタンスです。 ITransform3D 姿勢を取得・編集できるような3DオブジェクトのTransform情報です。 IVibrateSpriteEffect x軸とy軸の各方向に振動するような視覚効果を適用するエフェクトの設定です。 IVrm サブキャラとしてVRMのロードと操作を行うAPIです。 本APIは作成途上のものであり、VMagicMirror v4.0.0の時点では本APIは利用できません。 IVrmAnimation VRM Animationの読み込み処理に関するAPIです。 本APIは作成途上のものであり、VMagicMirror v4.0.0の時点では本APIは利用できません。 Enums AppLanguage VMagicMirrorの表示に使用している言語です。 AudioStoppedReason Play(string, float, float, string) で再生した音声が停止した理由を表す値です。 FaceSwitchState GetActiveFaceSwitch() の結果として取得できるような、 Face Switch機能で検出したユーザーの表情です。 GamepadButton ゲームパッドのボタンです。 HumanBodyBones UnityEngineのHumanBodyBonesと同じ順序で定義された人型ボーン情報の一覧です。 ただし、UnityEngineの値とは異なり、無効なボーンを表す None が追加で定義されています。 Sprite2DTransitionStyle Show(string) でスプライト画像を切り替えるプリセット演出の種類です。"
  },
  "docs/buddy-manifest.html": {
    "href": "docs/buddy-manifest.html",
    "title": "manifest.jsonでサブキャラの基本設定を定義する | VMagicMirror Buddy",
    "summary": "manifest.jsonでサブキャラの基本設定を定義する サブキャラ機能は動作を記述する main.csx スクリプトと基本設定を定義する manifest.json ファイルを最小限の構成要素としています。 本ページでは manifest.json の定義方法の例を紹介します。 例: 2D画像を表示するmanifest.json 同時に最大1つまでの2D画像を表示するようなサブキャラでは、次のような manifest.json を作成します。 この例は Getting Started で紹介している BuddySample.zip に含まれるものとほぼ同様です。 Note 下記で // から始まる行は実際のJSONには含まれないコメントです。 { // com.company.name のフォーマットで、サブキャラを一意に特定できるような名称を指定します。 \"id\": \"com.developerName.buddySample\", // GUI上に表示されるサブキャラの名称を日本語、および英語で指定しておきます。 \"displayName\": { \"ja\": \"サブキャラのサンプル\", \"en\": \"Buddy Example\" }, // 制作者の名前を指定します。 \"creator\": \"CreatorName\", // バージョン値を指定します。 \"version\": \"0.1.0\", // 制作者に関するURLを指定します。 \"creatorUrl\": \"https://example.com\", // GUI上に表示されるサブキャラの設定項目の一覧を定義します。 \"property\": [ // この例では type が transform2Dであるようなデータ、つまり2次元平面上での位置やサイズが編集できるオブジェクトを定義しています。 { \"name\": \"mainImage\", // 個別のプロパティをGUI上で表示する際の表示名も日本語、および英語で指定します。 \"displayName\": { \"ja\": \"メイン画像\", \"en\": \"Main Image\" }, // プロパティのデータの種類を指定します。 \"type\": \"transform2D\" } ] } 実際に使用されるデータについて VMagicMirror v4.0.0の時点では displayName および property が有効なデータとして使用されています。 これ以外のプロパティは、将来的にサブキャラの更新や適宜webページへの動線を追加することを目的として定義しています。 VMagicMirror v4.0.0の時点では使用していませんが、実体に応じた値を定義することを推奨しています。 プロパティの定義とスクリプトでの取得 プロパティ一覧にデータを追加で定義することで、エンドユーザーが値を編集できるUIが追加されます。 \"property\": [ { \"name\": \"mainImage\", ... }, { \"name\": \"flip\", \"displayName\": { \"ja\": \"画像を左右反転\", \"en\": \"Flip Horizontal\" }, \"type\": \"bool\" } ] プロパティの定義順はそのままGUI上での表示順として反映されます。 とくに、 type には様々な型のデータが指定でき、それぞれのデータに対応したGUIが提示できます。指定した type に応じて、main.csx スクリプトから対応するメソッドを呼び出すことで、ユーザーがGUI上で指定した値を取得できます。 bool : Api.Property.GetBool int : Api.Property.GetInt float : Api.Property.GetFloat string : Api.Property.GetString vector2 : Api.Property.GetVector2 vector3 : Api.Property.GetVector3 quaternion : Api.Property.GetQuaternion transform2D : Api.Transforms.GetTransform2D transform3D : Api.Transforms.GetTransform3D なお、type には action という特殊な値も指定できます。 action については次のセクションで紹介します。 actionプロパティ プロパティに type が action であるようなプロパティを定義すると、プロパティに対応する編集可能なデータはとくに追加されない変わり、GUI上にボタンが提示されます。 \"property\": [ { ... }, { \"name\": \"jumpAction\", \"displayName\": { \"ja\": \"ジャンプ\", \"en\": \"Jump\" }, \"type\": \"action\" } ] 上記の例では ジャンプ という名称のボタンが表示されます。このボタンを押下したことは Api.Property.ActionRequested イベントとしてスクリプトで検出できて、引数には name の名称が渡されます。 たとえば、ボタンを押すことでジャンプを行うようなリアクションが以下のように実装できます。 var sprite = Api.Create2DSprite(); ... Api.Property.ActionRequested += actionName => { if (actionName == \"jumpAction) { sprite.Effects.Jump.Jump(0.5f, 24f, 1); } } アプリケーションの実行中にmanifest.jsonを変更して適用する方法 manifest.json は原則としてVMagicMirror自体のアプリケーション起動時に1回だけ読み込まれます。 開発者モード を有効にすると、個別のサブキャラに対して manifest.json を含めたサブキャラの再読み込みを実行するUIが追加で表示されます。 もしアプリケーションを実行しながらプロパティ一覧の変更をチェックしたい場合、 開発者モード の説明も参考にしながら、開発者モードで作業を行って下さい。 リファレンスについて とくにプロパティ定義について、本ページでは網羅的な説明は行っていません。 manifest.json で定義できるデータの一覧については manifest.jsonのリファレンス を参照して下さい。"
  },
  "docs/debug-buddy.html": {
    "href": "docs/debug-buddy.html",
    "title": "開発者モードを使ってサブキャラをデバッグする | VMagicMirror Buddy",
    "summary": "開発者モードを使ってサブキャラをデバッグする 開発者モード VMagicMirrorの「サブキャラ」タブ上部から「開発者モード」をオンにできます。 開発者モードをオンにすると以下の機能が利用できます。これらのGUI機能については メインドキュメントのBuddyに関するページ も部分的に紹介しています。 ログの出力レベルを変更できます。 開発者モードをオンにすると、重大なエラーに加えて軽微なエラーや警告のログも出力の対象となります。 重大なエラーログのみを閲覧したい場合はログ詳細度を Fatal や Error にします。より多くのログを確認する場合、 Info や Vervose を選択します。 GUI上に直近のログは10件まで表示されます。 ただし、Api.Update イベントに対してログ出力を行っているなど、高頻度にログを出力している場合、一部のログはGUIに表示されず欠落することがあります。この場合、前セクションで紹介したログファイルを直接開いてログを確認します。 個別のサブキャラについて、 manifest.json を編集した結果を適用したい場合に、 再読み込み ボタンによって再読み込みを実行できます。 開発者モードがオフの場合、manifest.json の変更を反映するにはVMagicMirrorアプリケーション自体の再起動が必要になることに注意して下さい。 ログ出力APIとログファイルの閲覧方法 サブキャラのスクリプトでは、以下の関数を用いてログ出力を行えます。 Api.Log Api.LogWarning Api.LogError using System; using VMagicMirror.Buddy; Api.Start += () => { Api.Log(\"通常のログ\"); Api.LogWarning(\"警告ログ\"); Api.LogError(\"エラーログ\"); } この方法でログを出力するとき、前セクションで触れている開発者モードをオンにして、ログ詳細度を Info などのログが多く出力される設定に変更します。 出力したログはGUIに加えて、 (MyDocuments)\\VMagicMirror_Files\\Logs\\Buddy\\(サブキャラのフォルダ名).txt のファイルパスにテキストとして出力されます。 サブキャラのフォルダ名 は main.csx を配置しているフォルダの名称が使われます。 ログファイルが削除/再生成されるタイミングについて 上記の方法で取得できるログファイルについて、ログを含む (MyDocuments)\\VMagicMirror_Files\\Logs\\Buddy\\ フォルダはVMagicMirrorを起動するタイミングでフォルダが一度削除され、新規のアプリケーション実行と対応するログファイルで上書きされます。 ログファイルのバックアップを保存する場合、VMagicMirrorを終了後に、ログファイルを適当な別のフォルダにコピーしてください。"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | VMagicMirror Buddy",
    "summary": "Getting Started このページでは、初めてVMagicMirrorにサブキャラを自作する場合の基本的な概念と導入手順を紹介します。 概念等の説明をスキップしてサンプル導入から始める場合は、サンプルzipを導入して実行する から読み始めて下さい。 サブキャラ機能とは サブキャラ機能とは、VMagicMirrorから読み込める C# スクリプトを記述することで、メインのアバターと別で更にキャラクターを表示して制御できる機能です。 v4.0.0時点では画像(.png)を読み込んで平面的、または空間的に表示することができます。そのほか、v4.0.0時点でサブキャラは以下の機能をサポートしています。 短い音声ファイルの再生 メインアバターの動作の検出 例: アバターがキーボードを叩く動作を行った、アバターが「Happy」表情に切り替わった 将来的には下記のような機能もサポートを検討しています。 VRM / GLB等の3Dモデルの読み込み サブキャラに対してマウスオーバーしたことを検出できる機能 テキストの表示 ネットワークとの通信やネイティブライブラリ呼び出しなどの高度な機能 一方、サブキャラ機能では以下のような機能は導入を行わないか、または導入したとしても補助的な機能にとどまる予定です。 メインアバターを直接操作する機能 VMagicMirrorの設定をスクリプトから変更する機能 サブキャラを構成するファイル構造 サブキャラは (My Documents)\\VMagicMirror_Files\\Buddy\\ 以下に配置したフォルダとして表現されます。 このフォルダは少なくとも、スクリプト(main.csx) およびサブキャラの基本設定ファイル(manifest.json)を含む必要があります。 つまり、最小の構成からなるサブキャラのフォルダは以下のような内訳になります。 (My Documents)\\VMagicMirror_Files -Buddy - MyBuddy - main.csx - manifest.json また、画像等のアセットをサブキャラとして同梱する場合、それも同じフォルダに格納します。 たとえば、1枚の画像 (myImage.png) を表示するようにプログラムしたサブキャラを作成する場合のファイル構造は次のようになります。 (My Documents)\\VMagicMirror_Files\\Buddy\\ MyBuddy main.csx manifest.json myImage.png ファイルの役割 main.csx は C# スクリプトであり、サブキャラを有効化することでアプリケーションがスクリプトを読み込んで実行します。 VMagicMirrorではスクリプトから利用できる様々なAPIを提供しており、その一覧は API から確認できます。 manifest.json は JSON ファイルであり、サブキャラの表示名、バージョン、制作者名などの基本的な情報を定義します。 また、ユーザーがGUIから編集できる設定などの定義も本ファイル上で行います。以下は定義できる設定の一例です。 サブキャラを画像として表示するときの基本的な位置、サイズ サブキャラが特定の仕草を行うか、行わないか 立ち絵を変更できるようにした場合、その立ち絵のファイルパス サンプルを導入して実行する 最小限のデータからなるサブキャラを導入する方法を紹介します。 BuddySample.zip の導入 最小限の構成からなるサブキャラのサンプルとして BuddySample.zip ファイルをダウンロードして解凍します。 zipファイルの内容は以下のようになっています。 main.csx manifest.json default.png omnisharp.json .vscode launch.json manifest.json 解凍したフォルダを適当なフォルダ名に変更し、下記のようなフォルダ構造になるように配置します。 `(My Documents)\\VMagicMirror_Files\\ Buddy (フォルダ名) main.csx manifest.json default.png ... 配置後、VMagicMirrorを起動すると、上記のサブキャラが認識されて起動できるようになります。 この時点では、サブキャラとしては同梱された default.png 、つまり単なる青色の丸い画像が表示されます。 Note 本ページでは omnisharp.json や .vscode フォルダについて説明を省いています。これらのファイルはスクリプトの編集を補助するための設定ファイルであり、サブキャラの実行時には無視されます。 これらのファイルについては Write Buddy Script ページで別途説明しています。 立ち絵を差し替えてみる 上記の方法で起動したサブキャラに対して立ち絵を差し替えます。 default.png を適当な別の画像ファイルに置き換えます。 その後、サブキャラを一旦オフにして再びオンにすると、差し替えた画像ファイルが反映されます。 より詳細な説明 ここではサブキャラの基本的な概念や導入例を説明しました。 より詳細な説明については、各ページを参照してください。 サブキャラの基本設定を編集する: Buddy Manifest サブキャラのスクリプトを作成する: Write Buddy Script サブキャラのデバッグ方法を確認する: Debug Buddy スクリプトから利用できるAPI一覧を知りたい: API"
  },
  "docs/write-buddy-script.html": {
    "href": "docs/write-buddy-script.html",
    "title": "スクリプトを作成してサブキャラを動かす | VMagicMirror Buddy",
    "summary": "スクリプトを作成してサブキャラを動かす このページではサブキャラを動作させる C# スクリプトである main.csx の記述について説明します。 本ページは、動作するサブキャラが手元にある前提での説明を行います。必要に応じて、 Getting Started で紹介している BuddySample を改変用に展開しておくなどの準備を行います。 スクリプトの例 main.csx スクリプトの最小限の記述例は以下の通りです。 このスクリプトでは、エンドユーザーが表示位置を調整できるような固定画像を1枚表示しています。 // この #load ディレクティブはVS Code上での編集の補助のために定義している行であるため、そのままにして下さい。 #load \"..\\_Reference\\Globals.csx\" using System; // VMagicMirror専用のAPIにアクセスするためのusingステートメントです。 using VMagicMirror.Buddy; // 画像を表示するためのインスタンスを生成します。 var sprite = Api.Create2DSprite(); // manifest.jsonで定義した名称を指定することで、 // エンドユーザーが位置・スケールを編集できるような Transform2D のインスタンスを取得します。 var parent = Api.Transforms.GetTransform2D(\"mainImage\"); // Startイベントはサブキャラの起動時に一度だけ呼ばれます。 Api.Start += () => { // 画像の位置がユーザーの編集と連動できるように、親子関係を登録します。 sprite.Transform.SetParent(parent); // 画像のサイズを定義します。画像は、アバターウィンドウ全体のサイズがおよそ 1280x720 であるとしたときのサイズで指定します。 sprite.Size = new Vector2(128f, 128f); // 画像を指定して表示します。 \"default.png\" は、このスクリプトがあるフォルダに存在する必要があります。 sprite.Show(\"default.png\"); }; // Updateイベントは毎フレーム呼ばれます。これはサンプルスクリプトであるため、何もしないイベントハンドラを登録しています。 Api.Update += (deltaTime) => { }; また、main.csx があるフォルダの manifest.json 上で、 type が transform2D であるようなプロパティを定義しておく必要があります。 { ..., \"property\": [ { \"name\": \"mainImage\", \"displayName\": { \"ja\": \"メイン画像\", \"en\": \"Main Image\" }, \"type\": \"transform2D\" }, ... ] } Note BuddySample を解凍したフォルダの manifest.json では上記のプロパティが定義してあります。 スクリプトの実行の流れ VMagicMirrorでは、ユーザーがサブキャラを有効化した直後に main.csx スクリプト全体を1回だけ実行し、その後サブキャラが無効化されるまではスクリプトの内部状態が保持されます。 サブキャラが無効化された時点でスクリプトの状態はリセットされます。また、その後のサブキャラを再起動した場合、スクリプトは再度コンパイルされます。 とくに、スクリプトの実行時に最初に呼ばれる IRootApi.Start や毎フレーム実行される IRootApi.Update などが C#のeventとして定義されています。これらのイベントを購読することで、サブキャラの実行後も定期的にスクリプト上の処理を実行することができます。 また、VMagicMirrorではメインアバターに対してリアクションするサブキャラを実装しやすいように、 Start や Update よりもピンポイントな状況で発火するイベントを用意しています。下記はそのようなイベントの一例です。 アバターのまばたき: Api.AvatarFacial.OnBlink として取得可能な IAvatarFacial.OnBlinked イベント アバターがゲームパッドを握った状態でゲームパッドのボタン押下動作をした: Api.AvatarMotionEvent.OnGamepadButtonDown として取得可能な IAvatarMotionEvent.OnGamepadButtonDown イベント Api.AvatarMotionEvent.OnGamepadButtonDown += _ => { }; Api.AvatarFacial.OnBlinked += () => { }; VS CodeでAPIを補完表示しながらスクリプトを作成する方法 VS Codeでスクリプトを編集する場合、次のセットアップを行っておくとAPIの関数を補完しながら編集ができます。 セットアップ手順 VMagicMirrorでは、以下に示す方法で補完(Intellisense)を適用しながらサブキャラのスクリプトを編集できます。 サブキャラフォルダのセットアップ: BuddySample に含まれるファイルを解凍し、omnisharp.jsonおよび .vscode フォルダを、下記のようなファイル構造になるよう配置します。 main.csx manifest.json omnisharp.json .vscode launch.json manifest.json VS Codeのセットアップ: 以下を行います。 VS Codeに C# 拡張機能をインストール PC上に .NET SDK をインストール Powershell等で dotnet tool install -g dotnet-script を実行 スクリプトの確認: main.csxの冒頭に下記の行が無ければ、行を追記します。 #load \"..\\_References\\Globals.csx\" 上記のセットアップを行ったのち、VS Codeを再起動して「フォルダを開く」で main.csx を含むサブキャラのフォルダを開くことで、補完が適用された状態になります。 補完が適用される仕組みについて 上記のセットアップの大部分は、VMagicMirrorに限定しない一般的なC# Script (.csx)の補完環境のセットアップです。 このセットアップおよび main.csx の冒頭で指定したロード処理、つまり #load \"..\\_References\\Globals.csx\" によって、 (My Documents)\\VMagicMirror_Files\\Buddy\\_Reference\\ フォルダに含まれる以下のリソースが参照され、補完が適用されます。 Globals.csx VMagicMirror.Buddy.dll VMagicMirror.Buddy.xml Tip もし _Reference フォルダがまだ存在しない場合、 v4.0.0以降のバージョンのVMagicMirrorを一度起動すると生成されます。 なお、 Globals.csx をロードする #load の行はアプリケーションの実行時には無視されます。 サブキャラのスクリプト実行に関する注意点 上記のほか、サブキャラのスクリプトAPIは以下のような特徴を持ちます。個別の説明は API 以下の各ドキュメントを参照して下さい。 オブジェクトの親子関係 サブキャラを2D/3Dのオブジェクトとして表示するときは、基本的に下記の親子構造を作成します。 画像を平面的に表示する場合: 親: manifest.json で transform2D 型のプロパティを定義することでスクリプトから取得できる IReadOnlyTransform2D のインスタンス 子: Api.Create2DSprite で作成したスプライト画像インスタンスの Transform プロパティとして得られる ITransform2D のインスタンス 画像を空間的に表示する場合: 親: manifest.json で transform3D 型のプロパティを定義することでスクリプトから取得できる IReadOnlyTransform3D のインスタンス 子: Api.Create3DSprite で作成したスプライト画像インスタンスの Transform プロパティとして得られる ITransform3D のインスタンス transform2D や transform3D として定義した Transform の姿勢はエンドユーザーがGUIでの数値編集、またはフリーレイアウトモードによるギズモ操作を通じて編集されます。 これらのオブジェクトの子要素として視覚要素のある2D/3Dオブジェクトを設定することで、基本姿勢が編集できるようなサブキャラがセットアップできます。 つまり、下記のようなスクリプトはサブキャラの実装としては典型的な構成になります。 var sprite = Api.Create2DSprite(); var parent = Api.Transforms.GetTransform2D(\"myTransform\"); sprite.Transform.SetParent(parent); 親オブジェクトを設定することはスクリプトを実行するうえでは必須ではありませんが、エンドユーザーがサブキャラの表示位置を制御できるようにする場合、なるべく上記の構成に沿って下さい。 スクリプトの実行制限 VMagicMirrorのサブキャラ用スクリプトは下記の制限を受けます。 #load ..\\_Reference\\Globals.csx による読み込み処理は特別な処理として無視されます。 それ以外の #load ディレクティブでは、 main.csx のあるフォルダ、またはその親フォルダである Buddy フォルダに含まれるスクリプトが読み込めます。 Buddy フォルダに含まれないスクリプトを #load で読み込もうとした場合、そのスクリプトは空のスクリプトと見なされるか、またはファイルが見つからない旨のコンパイルエラーになります。 #r ディレクティブは使用できません。使用した場合、コンパイルエラーになります。 下記の namespace を using ステートメントで参照したり、これらのnamespaceのクラスにアクセスしたりするスクリプトは実行前にエラーになります。 System.AppDomain System.Configuration System.Diagnostics System.Environment System.IO System.Net System.Reflection System.Resources System.Runtime.InteropServices とくに System.IO については、ファイルの存在確認や読み込みなど一部のAPIに限定して、 VMagicMirror.Buddy.IO 名前空間でファイル、ディレクトリ、パス関連のAPIの一部を提供しています。 なお、今後のVMagicMirrorのアップデートで本制限の緩和を検討しています。 ネットワーク通信を行いたい、ネイティブライブラリと連携したい等、本制限の緩和を必要とするサブキャラの作成を考えている場合、 このGitHub issue にリアクションを行うか、または具体的な想定ユースケースをコメントする等の方法でcontributeを検討して下さい。 インタラクションAPIの制限について メインドキュメントの サブキャラ のページや ダウンロード のページに記載の通り、サブキャラにはエディションに応じた挙動の違いがあります。 現在のサブキャラでインタラクションAPIが利用可能かどうかは Api.InteractionApiEnabled で取得できます。 このフラグが false の場合、下記のAPI群には引き続きアクセスできますが、値が常にゼロなどの既定値になったり、イベントが発火しない等の制限がかかることに注意してください。 IInput IAvatarFacial IAvatarMotionEvent IAvatarPose 相対パスの取り扱い ISprite2D.Show 等のファイルパスを引数とするメソッドでは、ファイルパスが相対パスである場合、 main.csx のあるフォルダから見た相対パスとして解釈されます。また、これらのメソッドには絶対パスも指定できます。 つまり、下記の呼び出しはいずれも有効です。 ISprite2D sprite = ...; // main.csx のあるフォルダにある myImage.png を読み込む sprite.Show(\"myImage.png\"); // ユーザーが指定したファイルパス等に基づいて、絶対パスで指定された画像ファイルを読み込む sprite.Show(\"C:\\\\example\\\\path\\\\to\\\\image\\\\myImage.png\"); なお、 main.csx のあるディレクトリの絶対パスは IRootApi.BuddyDirectory で取得できます。 スレッド/非同期処理 サブキャラのスレッド制御における前提として、VMagicMirrorはUnity Engineで動作しており、3Dモデルや画像(テクスチャ)等、ゲームエンジンの基盤となるオブジェクトはメインスレッドのみから制御できます。 ISprite2D.Show 等はこのスレッドの制限を受けるため、メインスレッド外からAPIを呼び出すとエラーになることがあります。 IRootApi.Update など、スクリプトの基本的なイベントは全てメインスレッドから実行されるため、これらのイベントハンドラ上ではとくにスレッドの問題を考慮せずにサブキャラを操作できます。 もし Task で非同期的な処理を記述しながらサブキャラを制御したい場合、 IRootApi.RunOnMainThread の使用により、タスクをメインスレッド上で実行することを検討してください。 デフォルトサブキャラの実装について VMagicMirrorのGitHubレポジトリ で main.csx スクリプトを検索することにより、デフォルトのサブキャラを動かしているスクリプトの実装が確認できます。 コード量がやや多いですが、基本的には通常のサブキャラにも転用できる実装になっています。ただし、デフォルトサブキャラに特有の特徴として、下記の点に注意してください。 画像を表示するとき、 ISprite2D.Show の代わりにアプリケーションに埋め込んだ画像を読み込む ISprite2D.ShowPreset を使用しています。 同様に、立ち絵のセットアップ処理にあたって ISprite2D.SetupDefaultSprites 関数の代わりに ISprite2D.SetupDefaultSpritesByPreset を使用しています。 これらの特徴に関連して、Show 関数で画像ファイルが見つからないケースは考慮されていません。"
  },
  "index.html": {
    "href": "index.html",
    "title": "VMagicMirror サブキャラ機能 | VMagicMirror Buddy",
    "summary": "VMagicMirror サブキャラ機能 Note このドキュメントは現時点で日本語版のみを提供しています。英語のページも整備予定ですが、直近で日本語以外で本ドキュメントを参照する場合には、ブラウザの翻訳機能などをご使用下さい。 はじめに このウェブページは VMagicMirror v4.0.0で導入されたサブキャラ機能 (Buddy機能) の導入方法や、サブキャラ機能のスクリプトで利用できるAPIリファレンスを紹介するページです。 VMagicMirror自体の基本的な機能や使い方については メインのドキュメントページ で確認できます。 とくに、サブキャラを自作せずに既存のサブキャラを使う場合は先に 基本的なサブキャラの使用方法のページ を確認し、必要に応じて本ドキュメントも参照してください。 Note このドキュメントはv4.0.0のリリース (2025/05/31) にあわせて公開していますが、ドキュメンテーションは整備中です。とくに、実装の手がかりになるサブキャラのテンプレート整備が不十分なため、現行のドキュメントに基づくサブキャラの自作には高度なスキルが必要になります。 スクリプトの自作が不要、あるいは一部の改変のみで利用できるようなサブキャラのテンプレートについては別途公開を予定しています。 このドキュメントのコンテンツ サブキャラの作成や配布を検討しており、このページを初めて読んでいる場合、 Getting Started を確認してください。 それ以外の場合、目的に応じたページを確認します。 サブキャラの基本設定を編集する: Buddy Manifest サブキャラのスクリプトを作成する: Write Buddy Script サブキャラのデバッグ方法を確認する: Debug Buddy とくに、下記はリファレンスとなるページです。 サブキャラに対する基本設定の一覧を知りたい: manifest reference スクリプトから利用できるAPI一覧を知りたい: API"
  },
  "refs/manifest-json-references.html": {
    "href": "refs/manifest-json-references.html",
    "title": "manifest reference | VMagicMirror Buddy",
    "summary": "manifest reference このページでは、サブキャラの基本設定を行う manifest.json に定義可能な値の一覧を記載します。 JSON全体の例については サブキャラの基本設定を定義する 等を参照して下さい。 基本データ 基本データはいずれも定義が必須の項目です。 フィールド名 型 説明 id string 一意な識別子。パッケージやアセットの識別に使用します。 displayName object 表示名。GUI上で表示されます。 creator string 作成者名です。 version string バージョン番号です。 creatorUrl string 作成者のWebページやSNSなどへのリンクです。 property array プロパティ一覧です。 (後述) id は com.team.buddyName のような形式で定義することを推奨していますが、必須ではありません。 displayName では jaとenをキーとしたローカライズ文字列です。 \"displayName\": { \"ja\": \"日本語のラベル\", \"en\": \"English Label\" } プロパティ定義 フィールド名 型 説明 name string プロパティ名です。スクリプトからプロパティ値を取得するときのキーとして使用します。 displayName object GUI上に表示される名称です。 description object 有効なデータを指定した場合、ヘルプアイコンを通じて追加説明を提示します。 type string プロパティの種類です。(後述) boolData object type が bool の場合のプロパティの詳細を指定します。 intData object type が int の場合のプロパティの詳細を指定します。 floatData object type が float の場合のプロパティの詳細を指定します。 stringData object type が string の場合のプロパティの詳細を指定します。 vector2Data object type が vector2 の場合のプロパティの詳細を指定します。 vector3Data object type が vector3 の場合のプロパティの詳細を指定します。 quaternionData object type が quaternion の場合のプロパティの詳細を指定します。 transform2DData object type が transform2D の場合のプロパティの詳細を指定します。 transform3DData object type が transform3D の場合のプロパティの詳細を指定します。 name, type は必須であり、それ以外の値は省略可能です。 displayName, description はいずれも ja, enをキーとするローカライズ文字列です。 \"displayName\": { \"ja\": \"日本語のラベル\", \"en\": \"English Label\" } type では以下のいずれかの値を指定します。 bool int float string vector2 vector3 quaternion transform2D transform3D action 以降のセクションでは type に応じたデータ定義の例を個別に示します。いずれのデータも省略可能です。 boolData フィールド名 型 説明 defaultValue bool ユーザーが値を編集していないときのデフォルト値です。 boolData を省略するか、または defaultValue を省略した場合、デフォルト値が false であるものとして扱われます。 intData フィールド名 型 説明 defaultValue int ユーザーが値を編集していないときのデフォルト値です。 min int ユーザーに最小値/最大値つきのUIを提示するときの最小値です。 max int ユーザーに最小値/最大値つきのUIを提示するときの最大です。 enumOptions [string] ユーザーにドロップダウンとしてオプションを提示する場合の、各オプションの名称です。 intData を省略するか、または defaultValue を省略した場合、デフォルト値が 0 であるものとして扱われます。 その他のオプションは以下の性質を持ちます。 min / max を双方とも定義した場合、GUI上にはスライダーUIが表示されます。 enumOptions を定義した場合、GUI上には複数の選択肢から選べるようなドロップダウンUIが表示されます。 このとき、実際の int の値としては、ドロップダウンの最初の項目から順に 0, 1, 2, ... の値が適用されます。 floatData フィールド名 型 説明 defaultValue float ユーザーが値を編集していないときのデフォルト値です。 min float ユーザーに最小値/最大値つきのUIを提示するときの最小値です。 max float ユーザーに最小値/最大値つきのUIを提示するときの最大です。 floatData を省略するか、または defaultValue を省略した場合、デフォルト値が 0 であるものとして扱われます。 その他のオプションは以下の性質を持ちます。 min / max を双方とも定義した場合、GUI上にはスライダーUIが表示されます。 stringData フィールド名 型 説明 defaultValue float ユーザーが値を編集していないときのデフォルト値です。 isFilePath bool このプロパティをファイルパス扱いしたい場合、true を指定します。 stringData を省略するか、または defaultValue を省略した場合、デフォルト値が空文字列 \"\" であるものとして扱われます。 その他のオプションは以下の性質を持ちます。 isFilePath に true を指定した場合、UI上ではテキスト編集に加えて、ファイル選択ダイアログを表示するボタンを追加で表示します。 vector2Data フィールド名 型 説明 defaultValue object ユーザーが値を編集していないときのデフォルト値です。 vector2Data を省略するか、または defaultValue を省略した場合、デフォルト値がゼロベクトルとして扱われます。 defaultValueは x, yをキーとした値で指定します。 { \"x\": 1.0, \"y\": 2.0 } vector3Data フィールド名 型 説明 defaultValue object ユーザーが値を編集していないときのデフォルト値です。 vector3Data を省略するか、または defaultValue を省略した場合、デフォルト値がゼロベクトルとして扱われます。 defaultValueは x, y, zをキーとした値で指定します。 { \"x\": 1.0, \"y\": 2.0, \"y\": 2.0 } quaternionData フィールド名 型 説明 defaultValue object ユーザーが値を編集していないときのデフォルト値です。 quaternionData を省略するか、または defaultValue を省略した場合、デフォルト値は回転を行わないようなクォータニオンとして扱われます。 defaultValueは x, y, zをキーとした値で指定します。この値は、YXZの順で回転を行うオイラー角の角度(deg)として指定します。 { \"x\": 10.0, \"y\": 20.0, \"z\": 30.0 } transform2DData フィールド名 型 説明 defaultValue object ユーザーが値を編集していないときのデフォルト値です。 transform2DData を省略するか、または defaultValue を省略した場合、デフォルト値として画面にある程度収まるような適当な数値が指定されているように扱われます。 defaultValueは以下のような構造のobjectです。 position: デフォルトの位置を x と y を指定します。座標は、アバターウィンドウ全体のサイズがおおよそ 1280x720 であり、左下を (0, 0) であるとしたときの座標で指定します。 rotation: 回転をオイラー角表現として x, y, z で指定します。通常、2Dの画像では全ての値を0のままにするか、またはzを指定することで画像を回転させた状態をデフォルトにできます。 scale: スケールです。省略すると 1 として扱われます。 { \"position\": { \"x\": 300, \"y\": 100 }, \"rotationn\": { \"x\": 0.0, \"y\": 0.0, \"z\": 20.0 }, \"scale\": 1 } transform3DData フィールド名 型 説明 defaultValue object ユーザーが値を編集していないときのデフォルト値です。 transform3DData を省略するか、または defaultValue を省略した場合、デフォルト値として画面にある程度収まるような適当な数値が指定されているように扱われます。 defaultValueは以下のような構造のobjectです。 parentBone: HumanBodyBonesの名称を指定することで、このTransformがアタッチされるメインアバターのボーンを指定します。 position: デフォルトの位置を x, y, z で指定します。この座標は、空間上のワールド座標の位置、またはとして扱われます。 rotation: 回転をオイラー角表現として x, y, z で指定します。 scale: スケールです。省略すると 1 として扱われます。 { \"parentBone\": \"Head\", \"position\": { \"x\": 0.0, \"y\": 0.3, \"z\": 0.0 }, \"rotationn\": { \"x\": 0.0, \"y\": 10.0, \"z\": 0.0 }, \"scale\": 1 }"
  }
}